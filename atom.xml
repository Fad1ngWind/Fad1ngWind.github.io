<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>花蕊的心境</title>
  
  <subtitle>净世新生</subtitle>
  <link href="https://zhr0529.cn/atom.xml" rel="self"/>
  
  <link href="https://zhr0529.cn/"/>
  <updated>2025-04-26T06:52:29.586Z</updated>
  <id>https://zhr0529.cn/</id>
  
  <author>
    <name>花蕊</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>STM32第一部分学习</title>
    <link href="https://zhr0529.cn/posts/7e330aba.html"/>
    <id>https://zhr0529.cn/posts/7e330aba.html</id>
    <published>2025-04-26T06:48:45.000Z</published>
    <updated>2025-04-26T06:52:29.586Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>快速上手STM32外设</p></blockquote><h2 id="一、跑马灯"><a href="#一、跑马灯" class="headerlink" title="一、跑马灯"></a>一、跑马灯</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">delay_init();     </span><br><span class="line">LED_Init();  <span class="comment">// 需要初始化用到的模块（delay，LED）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">GPIO_ResetBits(GPIOC,GPIO_Pin_13);</span><br><span class="line">delay_ms(<span class="number">100</span>); </span><br><span class="line">GPIO_SetBits(GPIOC,GPIO_Pin_13);</span><br><span class="line">delay_ms(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>==GPIO_ResetBits置零（低电平），GPIO_SetBits置一（高电平）== 控制LED亮灭</p></li><li><p>go to definition到LED_Init内部一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE); <span class="comment">// 使能总线时钟</span></span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;        <span class="comment">// 初始化PC13引脚</span></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;   <span class="comment">// 设置推挽输出</span></span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line"><span class="comment">// 设置IO口速度GPIO_Speed_50MHz（一般默认50MHz）</span></span><br><span class="line">GPIO_Init(GPIOC, &amp;GPIO_InitStructure);  <span class="comment">// 把配置好的变量输入进去</span></span><br></pre></td></tr></table></figure><blockquote><p>以上是对GPIO_InitTypeDef结构体的初始化设置</p></blockquote></li><li><p>在led.c页面，在页面空白处右键，选择“toggle header”，进入led.h</p><p>  可写一个宏定义：==#define LED PCout（13）==<br>  PCout(13)=1; 这句就完全等于GPIO_SetBits(GPIOC,GPIO_Pin_13);<br>  PCout(13)=0; 这句就完全等于GPIO_ResetBits(GPIOC,GPIO_Pin_13);</p></li></ul><p>这样宏定义之后，控制PC13的电平就可以写得更简便</p><p>头文件中<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __LED_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __LED_H       </span></span><br><span class="line">… …</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><br>这一段是固定的，照着写即可。</p><hr><h2 id="二、按键"><a href="#二、按键" class="headerlink" title="二、按键"></a>二、按键</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">u8 a;</span><br><span class="line">delay_init();      </span><br><span class="line">LED_Init();</span><br><span class="line">KEY_Init(); <span class="comment">//按键初始化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)     </span><br><span class="line">&#123;</span><br><span class="line">a=KEY_Scan(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(a==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">LED=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">LED=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>变量a被KEY_Scan函数的返回值赋了个值，如果是a=1就让灯亮，a=2灯灭，逻辑分析结束。</p></blockquote><ul><li><strong>key.c:</strong><br>![[屏幕截图 2025-03-30 170039.png|500]]<br>使能了PB4和PB5两个GPIO口，但GPIO模式配置成了GPIO_Mode_IPU==上拉输入模式==</li></ul><p>上拉输入的IO口在外部接这个IO口的电路（外部输入电路）为==低电平==时，IO口可以测到明确的==低电平==</p><p>上拉输入的IO口在外部接这个IO口的电路（外部输入电路）为==高电平==时，IO口可以测到明确的==高电平==</p><p>上拉输入的IO口在外部接这个IO口的电路（外部输入电路）为==高阻态==时，IO口可以测到明确的==高电平==</p><ul><li><strong>key.h:</strong><br>![[屏幕截图 2025-03-30 170719.png|500]]</li></ul><p>GPIO_ReadInputDataBit( )  这个函数就是检测IO口电平的核心函数，比如检测B4口的电平是高还是低：</p><p>if(GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_4) == 1)就可以简化为：<br>    if(KEY1 == 1)</p><p>==<strong>并且GPIO_ReadInputDataBit函数还能进一步简化：</strong>==<br>    就像第一节的PCout(13)一样：<br>int a;<br>a=PBin(4); 这个a如果为1那PB4就是高电平，0就是低电平。</p><h3 id="KEY-Scan-函数"><a href="#KEY-Scan-函数" class="headerlink" title="KEY_Scan 函数"></a><strong>KEY_Scan 函数</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">u8 <span class="title function_">KEY_Scan</span><span class="params">(u8 mode)</span></span><br><span class="line">&#123; </span><br><span class="line">    <span class="type">static</span> u8 key_up=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(mode) key_up=<span class="number">1</span>;  <span class="comment">// mode=0，不支持长按</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(key_up &amp;&amp; (KEY1==<span class="number">0</span> || KEY2==<span class="number">0</span>))  <span class="comment">//这句就在判断是否有任何按键被按下：没                                有按键被按下前，变量key_up一直都是1，所以符合条件</span></span><br><span class="line">    &#123;</span><br><span class="line">        delay_ms(<span class="number">10</span>);   <span class="comment">//消抖延时</span></span><br><span class="line">        <span class="keyword">if</span>(KEY1==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            key_up = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> KEY1_PRESS;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(KEY2==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            key_up = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> KEY2_PRESS; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(KEY1==<span class="number">1</span> &amp;&amp; KEY2==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        key_up = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="三、如何自己添加代码文件"><a href="#三、如何自己添加代码文件" class="headerlink" title="三、如何自己添加代码文件"></a>三、如何自己添加代码文件</h2><ul><li>创建相应模块文件夹，编写.h文件和.c文件代码（可复制粘贴）</li><li>配置编译器：点界面上方三色块，添加.c源文件；<pre><code>  点魔术棒 - C/C++ - Include Paths，添加.h头文件</code></pre></li><li>在main函数添加新的头文件（#include “key.h”）</li></ul><hr><h2 id="四、定时器中断"><a href="#四、定时器中断" class="headerlink" title="四、定时器中断"></a>四、定时器中断</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);</span><br><span class="line">delay_init();      </span><br><span class="line">LED_Init();  </span><br><span class="line">TIM3_Init(<span class="number">20000</span><span class="number">-1</span>,<span class="number">720</span><span class="number">-1</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)     </span><br><span class="line">&#123;</span><br><span class="line">delay_ms(<span class="number">100</span>); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>STM32的每个中断都有自己的抢占优先级和子优先级</strong><br>    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);  ==设置中断优先级分组为分组2==</p><ul><li><p><strong>定时器：</strong><br>  TIM2，TIM3，TIM4这三个是通用定时器，TIM1是高级定时器。<br>  可以认为定时器内部有个计数器，初始值是0，每过1ms，计数器+1，一直过了99ms，这时，定时器的计数器的值是99；紧接着到第100ms，计数器数到了100，但是计数器的值不是100，而是清零，然后继续从0开始数，<strong>==同时触发定时器中断==</strong>。</p></li><li><p><strong>tim.c:</strong><br>  ![[屏幕截图 2025-03-30 225527.png|575]]<br>  TIM3_IRQHandler函数 —— ==中断服务函数==（函数名是不能改的，可以在里面运行各种代码）<br>  TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;<br>  NVIC_InitTypeDef NVIC_InitStructure;<br>  上面这两句分别是==<strong>定时器配置结构体</strong>==和==<strong>中断配置结构体</strong>==</p></li></ul><p>TIM_GetITStatus函数，获取定时器相关中断的状态。<br>当一个中断状态是RESET时证明这个中断==还没==准备好触发；<br>当一个中断状态是SET时证明这个中断==已经==准备好触发；</p><h3 id="自动重装载值arr-amp-预分频系数psc"><a href="#自动重装载值arr-amp-预分频系数psc" class="headerlink" title="自动重装载值arr &amp; 预分频系数psc"></a>自动重装载值arr &amp; 预分频系数psc</h3><ul><li><strong>psc</strong><br>  作用：==对总线时钟的频率进行分频，分频之后的频率就是定时器计数频率==</li></ul><p>STM32F103C8T6最小系统板的STM32的系统总线时钟的频率是==72Mhz==，也就是72,000,000 Hz，<u>这个数值要记住！</u></p><p>定时器的psc参数对系统总线时钟频率分频，psc=720 – 1，那意思就是720分频，也就是分频后的频率是之前的1/720，如下：<script type="math/tex">\frac720 = 100000H</script>分频后的频率是100000Hz，也就是100KHz，也就是定时器3的计数器的计数频率是100KHz。<br>100KHz也就是一个周期0.00001秒，也就是定时器3的计数器每0.00001秒记一个数。</p><p>psc=720 – 1，-1是内部寄存器规定的：0是不分频，1是二分频，2是三分频，依次类推</p><ul><li><strong>arr</strong><br>  作用：规定==“数到多少就触发定时器更新中断”==<br>  例：规定让计数器从0数到100，1ms数一次。<u>这个“100”就是arr，arr=100。</u></li></ul><p>所以自动重装载值arr的作用就是这个的计数器要记到多少才能进一次中断<br>arr=20000，那就是计数器计两万次才进一次中断，也就是0.00001 * 20000=0.2秒进一次中断。</p><p>![[屏幕截图 2025-03-30 231312.png|575]]</p><blockquote><p>定时器的计数器随着时间计数，然后计数器达到arr值（TIMx_ARR）时，触发定时器更新中断，然后计数器清零继续重新计数。</p></blockquote><hr><h2 id="五、STM32标准库"><a href="#五、STM32标准库" class="headerlink" title="五、STM32标准库"></a>五、STM32标准库</h2><p><u>STM32F10x_FWLib</u> 文件夹即为STM32标准库的库函数<br>“stm32f10x_”这个前缀，代表这套库函数可用于STM32F1的所有系列</p><h3 id="“stm32f10x-gpio-c”"><a href="#“stm32f10x-gpio-c”" class="headerlink" title="“stm32f10x_gpio.c”"></a>“stm32f10x_gpio.c”</h3><p>“stm32f10x_gpio.c”就是操作gpio相关的库函数，比如之前用的：<br>![[屏幕截图 2025-03-31 230921.png|625]]<br>这些凡是操作GPIO的函数全是。<br>因为我们go to definition以上的任意一个函数，都会跳转到“stm32f10x_gpio.c”里去。</p><h3 id="“stm32f10x-rcc-c”"><a href="#“stm32f10x-rcc-c”" class="headerlink" title="“stm32f10x_rcc.c”"></a>“stm32f10x_rcc.c”</h3><p>![[屏幕截图 2025-03-31 231027.png]]</p><p>这句就是它的函数，RCC分配外设时钟。</p><h3 id="“stm32f10x-usart-c”"><a href="#“stm32f10x-usart-c”" class="headerlink" title="“stm32f10x_usart.c”"></a>“stm32f10x_usart.c”</h3><p>串口相关的库函数</p><h3 id="“misc-c”"><a href="#“misc-c”" class="headerlink" title="“misc.c”"></a>“misc.c”</h3><p>Misc是Miscellaneous（各种各样的）的缩写，杂项文件，里面主要装的是NVIC相关文件。也就是中断优先级分配相关，以后做项目几乎必用中断，所以提前加。</p><ul><li>以==用到单片机的什么外设就加什么库==的原则，这样可以节省单片机的内存。</li></ul><hr><h2 id="六、PWM控制舵机"><a href="#六、PWM控制舵机" class="headerlink" title="六、PWM控制舵机"></a>六、PWM控制舵机</h2><h3 id="PWM"><a href="#PWM" class="headerlink" title="PWM:"></a><strong>PWM:</strong></h3><p>新的参数：==TIMx_CCRx==<br>CCR寄存器的全称是CCR(Capture/Compare Register)的缩写，即：捕获/比较寄存器。</p><p>![[屏幕截图 2025-03-31 232005.png|575]]</p><blockquote><pre><code>                                                   **PWM的频率与arr和psc有关**</code></pre></blockquote><p>==CNT<CCR时，PWM是高电平； CNT>CCR时，PWM是低电平==<br>CCR寄存器有比较的功能,<strong>CCR寄存器确定了PWM的占空比</strong>。占空比英文是“duty”：</p><script type="math/tex; mode=display">duty = \frac</script><p>PWM的频率由arr和psc决定； PWM的占空比由CCR决定</p><ul><li><strong>舵机：</strong><br>一般的舵机（特指模拟舵机）有三根线，VCC，GND和SIG（signal信号）<br>分别是电源线，地线和信号线，信号线需要接具有定时器PWM输出通道的引脚（==复用==）</li></ul><ul><li><strong>代码：</strong><br>![[屏幕截图 2025-04-01 143327.png|500]]</li></ul><h3 id="TIM1-PWM-Init："><a href="#TIM1-PWM-Init：" class="headerlink" title="TIM1_PWM_Init："></a>TIM1_PWM_Init：</h3><p>先看TIM1_PWM_Init：<br>    两个形参是arr自动重装载值和psc预分频系数<br>    舵机的PWM周期必须为20ms（50Hz），所以先配置arr和psc这两个参数，让PWM的周期正好是20ms。<br>    设置自动重装载值arr=20000，预分频系数psc=72<br>    则定时器自动装载一次的周期为：1/(72000000/72) * 20000 = 0.02s = 20ms，符合要求。注意这里，arr设置得越大，PWM占空比的精度越高，因为：<script type="math/tex">duty = \frac</script><br>    ![[屏幕截图 2025-04-01 143943.png|550]]![[屏幕截图 2025-04-01 143951 2.png|550]]<br>    比定时器中断少了中断服务函数TIMx_IRQHandler，也没有了NVIC的相关配置。main函数内也少了中断优先级分组，因为生成PWM用不到定时器中断。</p><ul><li>多了新结构体TIM_OCInitTypeDef TIM_OCInitStructure<br>TIM_OCInitTypeDef 是==定时器输出通道配置结构体==，带OC字样的都是其相关的配置，OC（Output Channel），输出通道。</li></ul><p>看代码，首先：<br>![[屏幕截图 2025-04-01 144711.png|625]]<br>==三个结构体：GPIO配置、定时器配置、定时器输出通道配置。==<br>两个RCC外设时钟使能：使能TIM1和GPIOA的外设。TIM1和GPIOA都在APB2总线上</p><p>接着相应的IO使能：<br>![[屏幕截图 2025-04-01 144943.png|600]]</p><blockquote><p>A8~A11，TIM1的四个PWM通道。<br>GPIO_Mode_AF_PP==复用推挽输出模式</p></blockquote><p><u>推挽输出和复用推挽输出的不同在于：<br>推挽输出是GPIO自己通过函数控制电平高低，比如PCout(13)=1;<br>复用推挽输出是GPIO把电平高低的控制权给了外设，这里就是给了TIM1，GPIO不管了，电平高还是低让TIM1自己去控制。</u></p><ul><li><p>定时器的参数配置</p></li><li><p>输出通道参数配置<br>  TIM_OCMode，配置为PWM模式1：TIM_OCMode_PWM1<br>  PWM模式1：递增计数时，当TIMx_CNT（计数值）<TIMx_CCR（捕获/比较值）时，输出为==有效电平==，否则为==无效电平==。  PWM模式2：递增计数时，当TIMx_CNT（计数值）< TIMx_CCR（捕获/比较值）时，输出为==无效电平==，否则为==有效电平==。  ![[屏幕截图 2025-04-02 134915.png|525]]  输出极性高：<u>有效电平为高电平&lt;/u&gt;<br>  输出极性低：<u>有效电平为低电平</u><br>  ==实际输出的电平是由输出极性和电平是否有效共同决定的==</p><p>   TIM_OutputState是输出模式是否开启，开启才能输出PWM，填TIM_OutputState_Enable。</p><p>  TIM_Pulse，意思是TIM_CCRx的初始值，一般都统一设为0。</p></li></ul><p>然后四句就是输出通道1~4的配置参数上传函数。</p><p>![[屏幕截图 2025-04-02 135424.png|575]]</p><blockquote><p>以上是可以不管的，写上即可</p></blockquote><p>最后一句<u>TIM_Cmd(TIM1, ENABLE)</u>,开启定时器</p><h3 id="TIM-SetComparex"><a href="#TIM-SetComparex" class="headerlink" title="TIM_SetComparex"></a>TIM_SetComparex</h3><p>![[屏幕截图 2025-04-02 140019.png|575]]<br>TIM_SetCompare1(TIM1,500)的意思就是设置定时器1的通道1的CCR值为500。<br>TIM_SetCompare2(TIM1,500)的意思就是设置定时器1的通道2的CCR值为500。</p><p>占空比公式：<script type="math/tex">duty = \frac</script><br>所以TIM_SetCompare1(TIM1,500);这句话的作用就是把TIM1_CH1的占空比改为：500/20000=2.5%，对应舵机的0°位置；<br>同理，后面TIM_SetCompare1(TIM1,2500)就是把占空比改为：<br>2500/20000=12.5%，对应舵机的180°位置</p><p>2025.4.2，还是没能明白占空比与舵机角度之间的对应关系，明白了回来还愿</p><hr><h2 id="七、仿真-amp-实物debug"><a href="#七、仿真-amp-实物debug" class="headerlink" title="七、仿真&amp;实物debug"></a>七、仿真&amp;实物debug</h2><p>看教程即可。</p><hr><h2 id="八、OLED显示"><a href="#八、OLED显示" class="headerlink" title="八、OLED显示"></a>八、OLED显示</h2><p>先看代码：<br>![[屏幕截图 2025-04-02 162732.png|600]]</p><ul><li>OLED_Clear 作用：清屏</li><li><p>OLED_ShowString（x，y，内容，字体大小），xy代表坐标值<br>  x的范围（0,127）<br>  y的范围：</p><pre><code>  如果字体高度为8，行数的范围是0到7。  如果文字高度为16，那只能塞下四行，对应的行数就只有0,2,4,6这四个值。</code></pre><p>  内容：注意（u8 * ）<br>  字体大小：8 / 16</p></li><li><p>OLED_Init函数<br>![[屏幕截图 2025-04-02 163421.png|625]]</p></li></ul><p>PA6，PA7接口可以随意更换：GPIO初始化换成任意其他的两个IO后，在oled.h更改宏定义</p><h3 id="sprintf函数"><a href="#sprintf函数" class="headerlink" title="sprintf函数"></a>sprintf函数</h3><p>利用sprintf可以轻松处理一个的字符串，==<strong>让一些变量值插入字符串</strong>==。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sprintf</span>(text,<span class="string">&quot;you have %d yuan!&quot;</span>, your_money);</span><br></pre></td></tr></table></figure></p><blockquote><p>此函数的作用就是将your_money变量的值插入字符串，并且将加工好的字符串赋值给text变量，text[20]是一个字符串。</p></blockquote><p>之后就可以使用OLED屏幕显示信息了</p><hr><h2 id="九、红外寻迹传感器"><a href="#九、红外寻迹传感器" class="headerlink" title="九、红外寻迹传感器"></a>九、红外寻迹传感器</h2><ul><li><strong>红外传感器原理：</strong><br>  红外发射管不断发射红外线，红外接收管不断接收是否有红外线反射回来。<br>  当红外线没有被反射回来，红外接收管关断，此时模块的输出端为==<strong>低电平</strong>==。<br>  当红外线被反射回来，红外接收管导通，此时对应的输出端就是==<strong>高电平</strong>==。</li><li>即：<br>  如果某个传感器检测到==白色==，那就输出==高电平“1”==；<br>  如果某个传感器检测到==黑色==，那就输出==低电平“0”==；</li></ul><p>看代码：<br>![[屏幕截图 2025-04-02 231445.png|525]]<br>extern：==外部调用==，定义一个==全局变量==<br>不在任何一个函数里，添加一句：extern int track_error;</p><ul><li><p><strong>track_Init:</strong><br>![[屏幕截图 2025-04-02 231924.png|650]]</p><blockquote><p>初始化了五个GPIO，==浮空输入==，用于检测循迹传感器的OUT1-OUT5。</p></blockquote><p>  浮空输入完全取决于外部输入信号，外部输入是1那就是1，外部输入是0就是0，外部输入是高阻态那就电平不确定。</p></li><li><p><strong>track.h:</strong><br>![[屏幕截图 2025-04-02 232117.png|600]]</p><blockquote><pre><code>    GPIO_ReadInputDataBit的作用就是读取一个IO口电平的高低，高电平即1，低电平即0</code></pre></blockquote><p>==##define OUT1 GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_4)==<br>==##define OUT1 PAin(4)==<br>以上两句是功能完全一样的，两种不同写法。</p></li></ul><hr><h2 id="十、超声波测距-amp-定时器计时"><a href="#十、超声波测距-amp-定时器计时" class="headerlink" title="十、超声波测距  &amp; 定时器计时"></a>十、超声波测距  &amp; 定时器计时</h2><p>*1. 会使用超声波测距   2. 会使用定时器进行计时   3. 提升C语言算法功底</p><h3 id="HC-SR04"><a href="#HC-SR04" class="headerlink" title="HC-SR04"></a>HC-SR04</h3><p>VCC：==电源线，3-5.5V宽电压输入==<br>GND：地线，连接单片机的接地（GND）<br>TRIG：==触发==控制信号输入<br>ECHO：==回响==信号输出</p><ul><li><strong>工作原理：</strong><br>(1)TRIG口 触发测距，给TRIG口最少 10us 的高电平。<br>(2)模块内部自动发送 8 个 40khz 的方波，自动检测是否有声波返回；（这一步我们了解即可，这是超声波传感器内部在干的事，无需我们操作）<br>(3)若有信号返回，经过模块内部运算后，通过 ECHO口 输出一个高电平，==高电平持续的时间就是超声波从发射到返回的时间。==</li></ul><p><strong>测量距离=(高电平时间* 声速)/2</strong></p><p>所以只需要：</p><ol><li><p>给TRIG口一个10us以上的高电平，去触发测量任务。<br>  把随便一个IO口搞成推挽输出，接到TRIG上去，然后电平置高，delay_us(11)，延时十微秒以上即可</p></li><li><p>传感器的测量任务进行完之后，ECHO会发出一段时间的高电平，这段高电平的持续时间经过换算就能得到待测距离。<br> 需要测量高电平持续时间</p><pre><code> 1. 测量高电平：     使用==GPIO_ReadInputDataBit==函数不断检测ECHO口电平，一旦电平变化就开始计时。 2. 测量高电平的持续时间     在高电平到来瞬间打开定时器开始计数，等到高电平结束关闭定时器。     CNT清零的同时会进定时器更新中断，我们可以在定时器中断里记录，每进一次定时器中断，记录清零次数+1。     再就是把ARR的值设置得尽量大一点，降低定时器更新中断的触发频率，比如arr=10和arr=65535，如果arr=10，程序会不停进入定时器更新中断以至于大量资源被占用，main函数while(1)的东西可能都执行不了了。</code></pre></li></ol><p>看代码：</p><ul><li>main:<br>![[屏幕截图 2025-04-03 232633.png|600]]<blockquote><p>选用定时器4。<br>psc=0=1-1，也就是计数频率是72MHz，不分频，为了让计数器的计数精度足够高<br>arr=65535，arr能取到的最大值就是65535。</p></blockquote></li></ul><ul><li><p>HC_SR04_Init:<br>![[屏幕截图 2025-04-03 232459.png|650]]</p><blockquote><p>Trig口推挽，echo口浮空<br>置低trig口，保持低电平，因为trig置高是开始测距的信号</p></blockquote></li><li><p>Senor_Using<br>![[屏幕截图 2025-04-08 223418.png|625]]</p></li></ul><p>第一句 extern int overcount 来自TIM4的中断服务函数，代表TIM4_CNT清零的次数。</p><p>while1 中：<br>    前三句用于操作trig口触发超声波开始测距<br>    ==while(GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_12) == RESET);==<br>    <strong>只要PA12是低电平，循环就一直进行<br>    也就是PA12（ECHO）一旦变成高电平，马上跳出这个循环</strong><br>    然后给相关变量清零：<br>        overcount=0;<br>        ==TIM4-&gt;CNT=0==（给TIM4的计数器清零）<br>        再TIM_Cmd(TIM4,ENABLE);开启定时器，定时器计数器就会开始递增，CNT到最大值清零并触发中断，中断内通过overcount记录清零次数。</p><p>再看后半段程序：<br>    变量i记录第几次测距，测五次取平均值（==均值滤波==）<br>    ==while(GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_12) == SET);==<br>    <strong>一旦检测到echo口变低，说明返回的超声波已经接收到了，就跳出循环</strong><br>    TIM_Cmd(TIM4,DISABLE);//关闭定时器，计数器也会停止计数。<br>    使用TIM_GetCounter函数得到定时器4计数器目前的值，这句代码等同于：tim=TIM4-&gt;CNT;</p><p>length计算公式：<br>    tim+overcount <em> 65536就是定时器这段时间总共计了多少个数<br>    高电平时间=总计数值 </em> 计数周期= (tim+overcount <em> 65536) </em> ( 1/72000000)</p><hr><h2 id="十一、直流有刷电机控制"><a href="#十一、直流有刷电机控制" class="headerlink" title="十一、直流有刷电机控制"></a>十一、直流有刷电机控制</h2><h3 id="L298N"><a href="#L298N" class="headerlink" title="L298N"></a>L298N</h3><p>L298N芯片内部集成有两个<strong>H桥电机驱动电路</strong><br>![[屏幕截图 2025-04-10 081014.png|500]]<br>中间这个圆圈代表<strong>直流电机</strong>。<br>已知<strong>S8050</strong>型号的三极管是<strong>NPN型三极管</strong>，<strong>S8550</strong>型号的三极管是<strong>PNP型三极管</strong>。<br>==(对于NPN型三极管，IN端给高电平开关导通；给低电平开关关断。PNP型三极管完全相反)==</p><ul><li><strong>分析：</strong><br>当IN1=1，IN2=0时：<br>Q1,Q4导通，Q2,Q3关断，电流流向如下图，定义此时电机正转：<br>![[屏幕截图 2025-04-10 081425.png|500]]</li></ul><p>当IN1=0，IN2=1时：电机电流与上图方向相反，所以电机反转。<br>![[屏幕截图 2025-04-10 081530.png|500]]</p><ul><li><p><strong>控制转速：</strong><br>  把IN1和IN2换成两路PWM控制<br>  比如当IN1占空比是0，IN2占空比是100%时，电机全速转<br>  但是当IN1占空比是0，IN2占空比是50%时，电机以全速的1/2转</p></li><li><p><strong>L298N引脚</strong><br>![[屏幕截图 2025-04-10 081913.png|500]]</p></li></ul><blockquote><pre><code>   ‘’通道A使能”、“通道B使能”、“板载5V使能”三个跳线帽都不能拔掉   电机A/B通道无法使能的话，对应通道的电机就不会转;   板载5V跳线帽拔掉，5V输出就没有了   用12V锂电池供电</code></pre></blockquote><ul><li><strong>L298N电路</strong><br>![[屏幕截图 2025-04-10 082354.png|500]]</li></ul><p>右边蓝色的八个二极管作用：<br>    四个钳位电路，将连接电机输出所有通道的电压值钳位在0-Vss（0-12V之间）<br>    因为电机是一种特别容易产生干扰的电气设备，==电动机反过来就是发电机==，如果不通电，手摇电机，就会产生不小的<strong><em>反电动势</em></strong>；如果发生电机急停等，电路电压就会产生很大的尖峰等干扰，电压一下会波动高于12V，如果不做钳位，可能就会对L2998N芯片等产生损害。</p><hr><ul><li><strong>代码分析：</strong><br>![[屏幕截图 2025-04-10 082656.png|500]]<blockquote><pre><code>   使输出PWM赫兹为24kHz（芯片推荐的PWM频率）</code></pre></blockquote></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">注意不同的电机有不同的额定电压</span><br><span class="line">额定电压是12V的电机，用12V电池供电，那PWM占空比就可以开到100%，让电机两端电压在12V。</span><br><span class="line">但是如果电机额定电压是8V，大于8V会烧坏电机。所以如果还是使用12V电池供电，PWM控制占空比最大只能开到66.6%。</span><br></pre></td></tr></table></figure><hr><h2 id="十二、电机编码器测速"><a href="#十二、电机编码器测速" class="headerlink" title="十二、电机编码器测速"></a>十二、电机编码器测速</h2><h3 id="编码器"><a href="#编码器" class="headerlink" title="编码器"></a>编码器</h3><p>首先我们要知道，==电机是电机，编码器是编码器==，这两个东西是各自独立的<br>13线霍尔款编码器原理如下图：<br>![[屏幕截图 2025-04-10 083844.png|500]]</p><ol><li>上图这个刻度盘安装在电机转轴上，随着电机一起旋转；</li><li>刻度盘上有一条条等间距的缝隙；</li><li>右边是个小红外灯（发光元件），一直向左边的光敏元件发射激光，但是刻度盘会把光挡住，激光只能穿过刻度盘的一条条缝隙射给光敏元件，如下图： ![[屏幕截图 2025-04-10 084120.png|500]]<br> 刻度盘一直转，光敏元件就能得到==一个循环被照和不被照==的==类似PWM的信号==，得到一个如下图A相那样的波：<br> ![[屏幕截图 2025-04-10 084245.png|500]]<br> 如果说刻度盘上共有25个缝隙。那么我们可以统计一段时间内<u>A波形所有高电平的数量</u>来得出刻度盘一共转了多少个==缝隙==，也就是多少个==刻度==。<strong>==并且能算出刻度盘转到了什么位置==</strong>。<br> 比如我们测得，10秒内，高电平共来了67个，那么也就是这个电机十秒转了67/25=2.68转，也就是十秒内的平均转速是0.268r/s</li></ol><p>这样我们就实现编码器测速了。</p><ul><li>==但是这样有个问题==，不知道盘转的方向，正转反转都是这样一个波！而且如果电机就来回正反转打哆嗦，这样始终就是同一个缝隙来回被光穿过，这样好像也能得到A波，这咋办呢？</li></ul><p>解决方法就是把刻度盘的==内圈==再刻上一圈与原缝隙错开90°的缝隙，然后再拿一个光敏元件和发光元件！如下图：![[屏幕截图 2025-04-10 084644.png|500]]这样就会得到如下两条锯齿波：<br>![[屏幕截图 2025-04-10 084733.png|500]]</p><p>A和B两组波形相位差是90º，可以按照下图判断出旋转方向：<br>![[屏幕截图 2025-04-10 084827.png|500]]<br>并且再进一步：通过观察上面AB相的波我们发现，圆盘向某个方向一直旋转，AB两相就是这四个状态周而复始。<br>![[屏幕截图 2025-04-10 085148.png|500]]</p><ul><li>由于该编码器为13线，也就是线数为13ppr，也就是刻度盘上每相都有13个==缝隙==；<br>  电机每转一圈，A或B相的脉冲数都是13；也就是电机转一圈A相和B相就分别有13个脉冲。<br>  而这个电机的减速器减速比为1：30：<pre><code>  也就是电机转30圈，输出转轴转一圈；编码器轴是连接在里面的电机轴上的，不是接在输出转轴上的。</code></pre>  综合==编码器线数==和==减速器减速比==，得出最外面的电机输出转轴转1圈，里面的霍尔编码器A或B相会有<u>13 * 90 = 390 个脉冲</u>。</li></ul><hr><ul><li><strong>看代码：</strong><br>![[屏幕截图 2025-04-10 085540.png|525]]<blockquote><pre><code>   使用了三个定时器</code></pre></blockquote></li></ul><p>先看TIM4_ENCODE_Init：<br>    编码器正交解码用的定时器4。<br>    多了一个IC结构体。（input channel， 输出通道）![[屏幕截图 2025-04-10 085754.png|500]]![[屏幕截图 2025-04-10 085759.png|750]]<br>    以上代码只需要复制黏贴就好了，除了第一句函数的第一个参数<br>    第一句是一个非常重要的库函数：<u><strong>编码器模式设置函数</strong></u>。<br>        TIM_EncoderMode_TI1代表仅TI1计数；<br>        TIM_EncoderMode_TI2代表仅TI2计数；<br>        TIM_EncoderMode_TI12代表TI1 TI2都计数。<br>        TI1就是输入通道1，就是PB6，就是编码器A相；<br>        TI2就是输入通道2，就是PB7，就是编码器B相。<br>        这个参数的意思具体看下面这两个图：![[屏幕截图 2025-04-10 090236.png|550]]<br>    我们使用的模式就是TI12都计数，也就是：![[屏幕截图 2025-04-10 090418.png|275]]观察上面三个图可知，只有正确的连续四个AB状态才会成功进行下一次计数，<br>    一旦有一个毛刺，发现顺序不对了就退回到上次顺序正确时候的计数值。<br>    ——————————————————————————————————————————<br>    再来看定时器的配置：![[屏幕截图 2025-04-10 090609.png|575]]<br>    为了保证最高的采样精度，psc不分频，72MHz。<br>    arr的值是综合了编码器线数、减速器减速比和通道采样方式的一个值：<br>    13ppr的编码器，1:30的减速器下，电机外转轴转一圈A或B相会有390个脉冲，但并不是A或B相来一个脉冲计数器计一次数，我们设置了TI12都计数，那就是每个AB相的正交脉冲组合都算作一次计数：<em>四个组合都算作计一次数，也就是全部的arr需要390 </em> 4=1560。*<br>    最后得出==电机输出转轴转一圈会有1560个状态==，定时器的计数器计1560个数。</p><ul><li><p>定时器4的中断服务函数：<br>  ![[屏幕截图 2025-04-10 090908.png|550]]<br>  每当更新中断（计数器溢出）来临，要先判断定时器是向上溢出还是向下溢出：<br>  “TIM4-&gt;CR1&gt;&gt;4&amp;0x01”这一堆就是调用了定时器4相关寄存器的相应位，<br>  结果=0就是向上溢出，结果=1就是向下溢出。<br>  向上溢出就是计数器计数到了1557、1558、1559，然后清零，0。<br>  向下溢出就是4,3,2,1,0，然后CNT=arr，1559,1558,1557。</p></li><li><p>定时器3的中断服务函数：<br>  ![[屏幕截图 2025-04-10 091205.png|700]]<br>  speed就是速度，单位是转每秒<br>  ==TIM4-&gt;CNT==的值就是定时器4计数器当前时刻的值，范围是0-1559。<br>  Last_num变量存着上次采样时TIM4-&gt;CNT的值，last_count存着上次采样的圈数，这次的和上次的一减，就是△X，△X/△t就是速度，△t是通过定时器3的psc和arr决定的，我们配置的是0.1秒，△t=0.1s。</p></li></ul><p>用到的三个定时器都是用作了不同的功能：<br>定时器1用于生成PWM控制电机。<br>定时器3用于多线程任务，计算电机转速。<br>定时器4用于编码器正交解码。</p><hr><h2 id="十三、电机PID闭环控制"><a href="#十三、电机PID闭环控制" class="headerlink" title="十三、电机PID闭环控制"></a>十三、电机PID闭环控制</h2><ul><li>先看代码：<br>  ![[屏幕截图 2025-04-23 172219 1.png|550]]<br>  定时器1：生成PWM<br>  定时器2：生成0.1s的定时器中断PID计算<br>  定时器3：生成0.1s的定时器中断电机编码器测速<br>  定时器4：正交解码</li></ul><h3 id="PID算法的原理和用法"><a href="#PID算法的原理和用法" class="headerlink" title="==PID算法的原理和用法=="></a><em>==PID算法的原理和用法==</em></h3><p>==PID（Proportional-Integral-Derivative）（比例-积分-微分）==算法是一种常用的反馈控制算法，广泛应用于自动控制系统中。它通过测量系统的误差（目标值与实际值之间的差异）来调整控制器的输出，以使系统的响应满足特定的要求。</p><h4 id="比例项P"><a href="#比例项P" class="headerlink" title="==比例项P=="></a><em>==比例项P==</em></h4><p>PID（位置式）：</p><script type="math/tex; mode=display">u = P*e + I*\int e + D*\mathop e\limits^ \bullet</script><p><em>P、I、D三个参数是确定不变的：也就是在自动控制中，这三个参数最初设定是多少就永远是多少；</em><br><em>上式中，u就是output，输出值；</em><br><em>e就是error，误差值，作为输入。</em></p><p><strong>比例控制P越大，接近目标值的速度越快，但是提升控制速度的代价是==超调==和==震荡==会随着P的增大而增大；P过大会使系统失稳。</strong><br>![[屏幕截图 2025-04-23 174358.png|425]]</p><h4 id="微分项D"><a href="#微分项D" class="headerlink" title="==微分项D=="></a><em>==微分项D==</em></h4><p>这时候就要引入D了，微分：</p><script type="math/tex; mode=display">u = P*e + D*\mathop e\limits^ \bullet</script><p>e上加一个点代表是e的微分。微分==离散化==之后就是e-e_last，e是这一次的误差，e_last是上一次的误差，于是公式就变成了：</p><script type="math/tex; mode=display">u = P*e + D*(e - {e_{last}}) = P*e + D*\Delta</script><p>D项相当于一个阻尼项，可以让控制更加平缓，不会有过猛过冲的情况，同理，D项最重要的作用就是消除超调量![[屏幕截图 2025-04-23 174422.png|625]]</p><h4 id="积分项I"><a href="#积分项I" class="headerlink" title="==积分项I=="></a><em>==积分项I==</em></h4><script type="math/tex; mode=display">u = P*e + I*\int e + D*\mathop e\limits^ \bullet</script><p>积分项I就是专门来消除静态误差的，加入积分项，PID就全了。<br>跟前面一样，把公式离散化：</p><script type="math/tex; mode=display">u = P*e + I*\sum e + D*\Delta e</script><p><strong>但是积分项I过大也会引起超调增大以及失稳，而且I过大会导致系统滞后，也就是调节效果慢半拍，降低系统快速性。</strong></p><h4 id="位置式PID和增量式PID"><a href="#位置式PID和增量式PID" class="headerlink" title="位置式PID和增量式PID"></a>位置式PID和增量式PID</h4><p>连续的PID公式：<script type="math/tex">u = P*e + I*\int e + D*\mathop e\limits^ \bullet</script>将其离散化，得到离散位置式PID公式：<script type="math/tex">u(k) = P*e(k) + I*\sum\limits_{i = 1}^k {e(i)} + D*[e(k) - e(k - 1)</script>K代表第k次PID调节，u(k)就是本次的输出值。</p><p><strong>增量式PID：</strong><br>增量的意思就是本次输出量和上次输出量的差值，比如第k次PID：<script type="math/tex">u(k) = P*e(k) + I*\sum\limits_{i = 1}^k {e(i)} + D*[e(k) - e(k - 1)</script>那上次就是k-1次PID：<script type="math/tex">u(k - 1) = P*e(k - 1) + I*\sum\limits_{i = 1}^{k - 1} {e(i)} + D*[e(k - 1) - e(k - 2)</script>两式一减就是增量式：<script type="math/tex">\Delta u(k) = u(k) - u(k - 1)$$$$\Delta u(k) = P*[e(k) - e(k - 1)] + I*e(k) + D*[e(k) - 2*e(k - 1) + e(k - 2)</script>△u(k)是输出值的增量，==也就是上一次的输出值加上△u(k)就是这一次的输出值。==</p><p><strong>两种PID的应用场合：</strong><br>（1）==位置式PID控制器==适用于需要快速响应和精确控制的场景。比如，在电机控制中，需要控制电机的转速或位置，使其能够快速响应并准确控制，这时可以使用位置式PID控制器。又如，在温度控制中，需要控制温度的精度和稳定性，这时也可以使用位置式PID控制器，同时位置式PID中，I项是会产生滞后，增加准确性的作用，为了系统的快速性，有可能I项直接不用，只用PD控制。</p><p>（2）==增量式PID控制器==适用于需要较强稳定性和对测量噪声较高的场景。比如，在机器人控制中，需要控制机器人的运动轨迹，这时可以使用增量式PID控制器，因为机器人在运动过程中，往往受到各种干扰，如摩擦力、惯性力等，增量式PID控制器对这些干扰有较强的稳定性；又如，在液位控制中，需要控制液位的高度和稳定性，这时也可以使用增量式PID控制器，因为在液位测量中，测量信号通常存在一定的噪声和波动，增量式PID控制器可以较好地抵抗这些干扰。</p><ul><li>**位置式PID代码：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pid.h&quot;</span></span></span><br><span class="line"><span class="type">static</span> <span class="type">float</span> err_last=<span class="number">0</span>;                <span class="comment">//上次的误差</span></span><br><span class="line"><span class="type">static</span> <span class="type">float</span> err=<span class="number">0</span>;                        <span class="comment">//本次的误差</span></span><br><span class="line"><span class="type">static</span> <span class="type">float</span> Integral_err=<span class="number">0</span>;    <span class="comment">//累计的误差</span></span><br><span class="line"><span class="type">static</span> <span class="type">float</span> P=<span class="number">0</span>;<span class="comment">//         //P</span></span><br><span class="line"><span class="type">static</span> <span class="type">float</span> I=<span class="number">0</span>;<span class="comment">//           //I</span></span><br><span class="line"><span class="type">static</span> <span class="type">float</span> D=<span class="number">0</span>;<span class="comment">//         //D</span></span><br><span class="line"><span class="type">float</span> a_m=<span class="number">0.0</span>;                            <span class="comment">//输出值</span></span><br><span class="line"><span class="type">float</span> <span class="title function_">pid_control</span><span class="params">(<span class="type">float</span> speed)</span></span><br><span class="line"> &#123;     </span><br><span class="line">    err=(aim_v - now_v);           <span class="comment">//获得本次误差</span></span><br><span class="line">    Integral_err += err;             <span class="comment">//获得累加误差</span></span><br><span class="line">    a_m = P * err + I * Integral_err + D * (err - err_last); <span class="comment">//位置式PID公式</span></span><br><span class="line">    a_m = a_m&lt;<span class="number">10000</span>?a_m:<span class="number">10000</span>;   <span class="comment">//对输出值进行限幅</span></span><br><span class="line">    a_m = a_m&gt;<span class="number">-10000</span>?a_m:<span class="number">-10000</span>;</span><br><span class="line">    <span class="keyword">return</span> a_m;                       <span class="comment">//输出a_m</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>a_m = a_m<10000?a_m:10000;              ==输出限幅==很重要a_m = a_m>-10000?a_m:-10000;</p></blockquote><ul><li><p>**增量式PID代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pid.h&quot;</span></span></span><br><span class="line"><span class="type">static</span> <span class="type">float</span> err_last_last=<span class="number">0</span>;      <span class="comment">//上上次的误差</span></span><br><span class="line"><span class="type">static</span> <span class="type">float</span> err_last=<span class="number">0</span>;          <span class="comment">//上次的误差</span></span><br><span class="line"><span class="type">static</span> <span class="type">float</span> err=<span class="number">0</span>;                  <span class="comment">//本次的误差</span></span><br><span class="line"><span class="type">static</span> <span class="type">float</span> P=<span class="number">0</span>;             <span class="comment">//参数P</span></span><br><span class="line"><span class="type">static</span> <span class="type">float</span> I=<span class="number">0</span>;              <span class="comment">//参数I</span></span><br><span class="line"><span class="type">static</span> <span class="type">float</span> D=<span class="number">0</span>;            <span class="comment">//参数D</span></span><br><span class="line"><span class="type">static</span> <span class="type">float</span> off_cal = <span class="number">0</span>;</span><br><span class="line"><span class="type">float</span> a_m=<span class="number">0.0</span>;                      <span class="comment">//输出值</span></span><br><span class="line"><span class="type">float</span> <span class="title function_">pid_control</span><span class="params">(<span class="type">float</span> speed)</span></span><br><span class="line"> &#123;     </span><br><span class="line">    err_last_last=err_last;       <span class="comment">//更新上上次的误差</span></span><br><span class="line">    err_last=err;                   <span class="comment">//更新上次的误差</span></span><br><span class="line">    err=(aim_v - now_v);             <span class="comment">//更新本次误差</span></span><br><span class="line">    off_cal = P * (err - err_last) + I * err + D * (err + err_last_last - <span class="number">2</span> * err_last); <span class="comment">//增量式PID的公式</span></span><br><span class="line">    a_m+= off_cal;                    <span class="comment">//得到输出值</span></span><br><span class="line">    a_m = a_m&lt;<span class="number">10000</span>?a_m:<span class="number">10000</span>;     <span class="comment">//对输出值进行限幅</span></span><br><span class="line">    a_m = a_m&gt;<span class="number">-10000</span>?a_m:<span class="number">-10000</span>;</span><br><span class="line">    <span class="keyword">return</span> a_m;                        <span class="comment">//输出a_m</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>电机速度闭环控制及调参方法</strong></p></li></ul><ol><li>把P、I、D三个参数都调成0</li><li><br>先调P，P从0开始缓慢增大，比如先让P=0.1，观察速度变化，一旦电机一上电，速度超过了目标值，比如2.5r/s，说明有超调了，这时候快速性已经没问题了。</li><li><br>然后慢慢增大D，增加阻尼，减小超调，稍微增大D，观察速度变化，让电机上电后快速稳定在2r/s，即参数调试完成。</li><li><br>速度闭环控制中，积分项I的作用不大，因为发现并没有静态误差，就没有调积分项。</li></ol><hr><h2 id="十四、Ozone变量可视化"><a href="#十四、Ozone变量可视化" class="headerlink" title="十四、Ozone变量可视化"></a>十四、Ozone变量可视化</h2><p>看教程即可。</p><hr><h2 id="十五、I2C底层通信"><a href="#十五、I2C底层通信" class="headerlink" title="十五、I2C底层通信"></a>十五、I2C底层通信</h2><p>[[SPI、UART、RS232、RS485、IIC 通信总线协议]]</p><ul><li><p>i2c.c：<br>![[屏幕截图 2025-04-24 175723.png|575]]<br>引脚的初始化，两个推挽输出。SCL是时钟信号，STM32是主机，负责发出时钟信号，所以IO模式使用推挽输出。</p></li><li><p>i2c.h：<br>![[屏幕截图 2025-04-24 180116.png|600]]</p><blockquote><pre><code>   直接控制了STM32的寄存器，没有任何库函数</code></pre></blockquote></li></ul><h3 id="位操作"><a href="#位操作" class="headerlink" title="位操作"></a>位操作</h3><ul><li>STM32F1xx的中文参考手册:<br>![[屏幕截图 2025-04-24 180512.png|650]]<br>32位寄存器，管GPIO低八位的模式，比如是GPIOA，那就管着GPIOA.0 – GPIOA.7这八个脚。</li></ul><p>&amp; | &lt;&lt; &gt;&gt; ~ ^ 这六个属于==位运算符==，<br>分别代表“与运算”，“或运算”，“左移”，“右移”，“按位取反”，“按位异或”。</p><p>GPIOA-&gt;CRL&amp;=0XFF0FFFFF：<br>0XFF0FFFFF  <u>十六进制转二进制为：</u>  “1111 1111 0000 1111 1111 1111 1111 1111”<br>GPIOA-&gt;CRL&amp;=0XFF0FFFFF也就是GPIOA-&gt;CRL=GPIOA-&gt;CRL&amp;0XFF0FFFFF<br>对比上图，也就是==把GPIOA_CRL寄存器的23~20位全部置0==，也就是让5号口的所有配置全部置0</p><p>GPIOA-&gt;CRL|=(u32)8&lt;&lt;20; ，这个“(u32)8”，8是十进制，被强制转换成了无符号32位，那就是：<br>(u32)8等价于“0000 0000 0000 0000 0000 0000 0000 1000”。<br>“&lt;&lt;20”就是把(u32)8左移20位：<br>“0000 0000 0000 0000 0000 0000 0000 1000”左移20位变成了：<br>“0000 0000 1000 0000 0000 0000 0000 0000”<br>左移之后再或运算“|”，这其实就是把23~20位，也就是A5口的这四个位配置为：![[屏幕截图 2025-04-24 181803.png|319]]1000，对照表可知：<br>![[屏幕截图 2025-04-24 182008.png|675]]<br>==1000对应着上/下拉输入。==<br>具体是上拉还是下拉，用PAout(5)这个函数决定</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">上拉输入的IO口在外部接IO口的电路（外部输入电路）为低电平时，IO口可以测到明确的低电平；</span><br><span class="line">上拉输入的IO口在外部接IO口的电路（外部输入电路）为高电平时，IO口可以测到明确的高电平；</span><br><span class="line">上拉输入的IO口在外部接IO口的电路（外部输入电路）为高阻态时，IO口可以测到明确的高电平；</span><br><span class="line"></span><br><span class="line">下拉输入的IO口在外部接IO口的电路（外部输入电路）为低电平时，IO口可以测到明确的低电平；</span><br><span class="line">下拉输入的IO口在外部接IO口的电路（外部输入电路）为高电平时，IO口可以测到明确的高电平；</span><br><span class="line">下拉输入的IO口在外部接IO口的电路（外部输入电路）为高阻态时，IO口可以测到明确的低电平；</span><br></pre></td></tr></table></figure><h3 id="IIC通信函数："><a href="#IIC通信函数：" class="headerlink" title="IIC通信函数："></a><strong>IIC通信函数：</strong></h3><ol><li>开始位</li><li>结束位</li><li>主机回应从机ack</li><li>主机回应从机nack</li><li>主机等待从机回应</li><li>主机发送一个字节</li><li>主机接收一个字节</li></ol><p><strong>一、开始位</strong><br>![[屏幕截图 2025-04-24 182557.png|500]]<br>开始位：SCL保持高电平，SDA由高电平变为低电平后，延时(&gt;4.7us)，SCL变为低电平。为啥说了要大于4.7us，但是要延时2us呢？<br>因为代码运行也需要一定时间，加上代码运行时间即可大于4.7us。</p><p><strong>二、停止位</strong><br>![[屏幕截图 2025-04-24 182806.png|575]]<br>停止信号：SCL保持高电平。SDA由低电平变为高电平。</p><p>IIC信号在数据传输过程中，当SCL=1高电平时，数据线SDA必须保持稳定状态，不允许有电平跳变，只有在时钟线上的信号为低电平期间，数据线上的高电平或低电平状态才允许变化。</p><p>SCL=1时 数据线SDA的任何电平变换会看做是总线的起始信号或者停止信号。</p><p><strong>三、应答信号和不应答信号</strong><br>![[屏幕截图 2025-04-24 183156.png|600]]<br>应答信号：主机SCL拉高，读取从机SDA的电平，为低电平表示产生应答。应答信号为低电平时，规定为有效应答位（ACK，简称应答位），表示接收器已经成功地接收了该字节；</p><p>应答信号为高电平时，规定为非应答位（NACK），一般表示接收器接收该字节没有成功。</p><p><strong>四、等待从机应答</strong><br>![[屏幕截图 2025-04-24 183406 1.png|375]]</p><p><strong>五、主机发送一个字节</strong><br>![[屏幕截图 2025-04-24 183516.png|450]]</p><p><strong>六、主机读取一个字节</strong><br>![[屏幕截图 2025-04-24 183712.png|500]]</p><hr><h2 id="十六、逻辑分析仪"><a href="#十六、逻辑分析仪" class="headerlink" title="十六、逻辑分析仪"></a>十六、逻辑分析仪</h2><p>看教程即可。</p><hr><h2 id="十七、MPU6050（陀螺仪-加速度计）"><a href="#十七、MPU6050（陀螺仪-加速度计）" class="headerlink" title="十七、MPU6050（陀螺仪/加速度计）"></a>十七、MPU6050（陀螺仪/加速度计）</h2><p>==注意！使用MPU6050时需要水平放置！不要把芯片竖着放，会导致芯片内部的陀螺仪初始化不成功！==</p><p>MPU6050的本质是一个IIC通信的传感器模块，也就是一个传感器：<br><strong>MPU6050=陀螺仪+加速度计+数字运动处理器DMP（digital motion processor）</strong><br>陀螺仪可以测量以空间坐标系x、y、z轴为转轴的三轴角速度；加速度计可以测量x、y、z三轴方向的加速度；3轴+3轴=6轴，所以是六轴运动处理传感器。</p><p>![[屏幕截图 2025-04-26 142914.png|575]]<br>只需要接VCC、GND、SCL、SDA四个脚即可<br>传感器的作用：==获取当前的三轴角速度和三轴加速度。==</p><ul><li>看代码：<br>![[屏幕截图 2025-04-26 143245.png|550]]<br>IIC通信接口的初始化，随便两个口就行<br>MPU6050初始化，DMP初始化，不需要看，只需要会用<br>只需要在合适的地方添加Read_DMP函数即可，为读出：三轴姿态角，三轴角速度，三轴加速度</li></ul><p>三轴姿态角就是Pitch、Roll、Yaw，俯仰角，横摆角，航向角<br>三轴角速度就是gyro[0]、gyro[1]、gyro[2]<br>三轴加速度就是accel[0]、accel [1]、accel [2]</p><p>每次调用Read_DMP函数，角速度和加速度的相关变量就自动赋值了，我们引用下面这个头文件之后直接用就行<br>![[屏幕截图 2025-04-26 144016.png|600]]</p><hr><h2 id="十八、完成平衡小车"><a href="#十八、完成平衡小车" class="headerlink" title="十八、完成平衡小车"></a>十八、完成平衡小车</h2><p><em>放手去做！</em></p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;快速上手STM32外设&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、跑马灯&quot;&gt;&lt;a href=&quot;#一、跑马灯&quot; class=&quot;headerlink&quot; title=&quot;一、跑马灯&quot;&gt;&lt;/a&gt;一、跑马灯&lt;/h2&gt;&lt;figure class=&quot;</summary>
      
    
    
    
    
    <category term="STM32" scheme="https://zhr0529.cn/tags/STM32/"/>
    
  </entry>
  
  <entry>
    <title>【理论】Linux学习笔记</title>
    <link href="https://zhr0529.cn/posts/7b3c0b9d.html"/>
    <id>https://zhr0529.cn/posts/7b3c0b9d.html</id>
    <published>2025-04-09T06:29:05.000Z</published>
    <updated>2025-04-09T06:34:50.666Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux基础命令"><a href="#Linux基础命令" class="headerlink" title="Linux基础命令"></a>Linux基础命令</h1><h2 id="Linux的目录结构"><a href="#Linux的目录结构" class="headerlink" title="Linux的目录结构"></a>Linux的目录结构</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027214128.png" alt="image-20221027214128453"></p><ul><li><code>/</code>，根目录是最顶级的目录了</li><li>Linux只有一个顶级目录：<code>/</code></li><li>路径描述的层次关系同样适用<code>/</code>来表示</li><li>/home/itheima/a.txt，表示根目录下的home文件夹内有itheima文件夹，内有a.txt</li></ul><h2 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h2><p>功能：列出文件夹信息</p><p>语法：<code>ls [-l -h -a] [参数]</code></p><ul><li>参数：被查看的文件夹，不提供参数，表示查看当前工作目录</li><li>-l，以列表形式查看</li><li>-h，配合-l，以更加人性化的方式显示文件大小</li><li>-a，显示隐藏文件</li></ul><h3 id="隐藏文件、文件夹"><a href="#隐藏文件、文件夹" class="headerlink" title="隐藏文件、文件夹"></a>隐藏文件、文件夹</h3><p>在Linux中以<code>.</code>开头的，均是隐藏的。</p><p>默认不显示出来，需要<code>-a</code>选项才可查看到。</p><h2 id="pwd命令"><a href="#pwd命令" class="headerlink" title="pwd命令"></a>pwd命令</h2><p>功能：展示当前工作目录</p><p>语法：<code>pwd</code></p><h2 id="cd命令"><a href="#cd命令" class="headerlink" title="cd命令"></a>cd命令</h2><p>功能：切换工作目录</p><p>语法：<code>cd [目标目录]</code></p><p>参数：目标目录，要切换去的地方，不提供默认切换到<code>当前登录用户HOME目录</code></p><h2 id="HOME目录"><a href="#HOME目录" class="headerlink" title="HOME目录"></a>HOME目录</h2><p>每一个用户在Linux系统中都有自己的专属工作目录，称之为HOME目录。</p><ul><li><p>普通用户的HOME目录，默认在：<code>/home/用户名</code></p></li><li><p>root用户的HOME目录，在：<code>/root</code></p></li></ul><p>FinalShell登陆终端后，默认的工作目录就是用户的HOME目录</p><h2 id="相对路径、绝对路径"><a href="#相对路径、绝对路径" class="headerlink" title="相对路径、绝对路径"></a>相对路径、绝对路径</h2><ul><li><p>相对路径，==非==<code>/</code>开头的称之为相对路径</p><p>相对路径表示以<code>当前目录</code>作为起点，去描述路径，如<code>test/a.txt</code>，表示当前工作目录内的test文件夹内的a.txt文件</p></li><li><p>绝对路径，==以==<code>/</code>开头的称之为绝对路径</p><p>绝对路径从<code>根</code>开始描述路径</p></li></ul><h2 id="特殊路径符"><a href="#特殊路径符" class="headerlink" title="特殊路径符"></a>特殊路径符</h2><ul><li><code>.</code>，表示当前，比如./a.txt，表示当前文件夹内的<code>a.txt</code>文件</li><li><code>..</code>，表示上级目录，比如<code>../</code>表示上级目录，<code>../../</code>表示上级的上级目录</li><li><code>~</code>，表示用户的HOME目录，比如<code>cd ~</code>，即可切回用户HOME目录</li></ul><h2 id="mkdir命令"><a href="#mkdir命令" class="headerlink" title="mkdir命令"></a>mkdir命令</h2><p>功能：创建文件夹</p><p>语法：<code>mkdir [-p] 参数</code></p><ul><li>参数：被创建文件夹的路径</li><li>选项：-p，可选，表示创建前置路径</li></ul><h2 id="touch命令"><a href="#touch命令" class="headerlink" title="touch命令"></a>touch命令</h2><p>功能：创建文件</p><p>语法：<code>touch 参数</code></p><ul><li>参数：被创建的文件路径</li></ul><h2 id="cat命令"><a href="#cat命令" class="headerlink" title="cat命令"></a>cat命令</h2><p>功能：查看文件内容</p><p>语法：<code>cat 参数</code></p><ul><li>参数：被查看的文件路径</li></ul><h2 id="more命令"><a href="#more命令" class="headerlink" title="more命令"></a>more命令</h2><p>功能：查看文件，可以支持翻页查看</p><p>语法：<code>more 参数</code></p><ul><li>参数：被查看的文件路径</li><li>在查看过程中：<ul><li><code>空格</code>键翻页</li><li><code>q</code>退出查看</li></ul></li></ul><h2 id="cp命令"><a href="#cp命令" class="headerlink" title="cp命令"></a>cp命令</h2><p>功能：复制文件、文件夹</p><p>语法：<code>cp [-r] 参数1 参数2</code></p><ul><li>参数1，被复制的</li><li>参数2，要复制去的地方</li><li>选项：-r，可选，复制文件夹使用</li></ul><p>示例：</p><ul><li>cp a.txt b.txt，复制当前目录下a.txt为b.txt</li><li>cp a.txt test/，复制当前目录a.txt到test文件夹内</li><li>cp -r test test2，复制文件夹test到当前文件夹内为test2存在</li></ul><h2 id="mv命令"><a href="#mv命令" class="headerlink" title="mv命令"></a>mv命令</h2><p>功能：移动文件、文件夹</p><p>语法：<code>mv 参数1 参数2</code></p><ul><li>参数1：被移动的</li><li>参数2：要移动去的地方，参数2如果不存在，则会进行改名</li></ul><h2 id="rm命令"><a href="#rm命令" class="headerlink" title="rm命令"></a>rm命令</h2><p>功能：删除文件、文件夹</p><p>语法：<code>rm [-r -f] 参数...参数</code></p><ul><li>参数：支持多个，每一个表示被删除的，空格进行分隔</li><li>选项：-r，删除文件夹使用</li><li>选项：-f，强制删除，不会给出确认提示，一般root用户会用到</li></ul><blockquote><p>rm命令很危险，一定要注意，特别是切换到root用户的时候。</p></blockquote><h2 id="which命令"><a href="#which命令" class="headerlink" title="which命令"></a>which命令</h2><p>功能：查看命令的程序本体文件路径</p><p>语法：<code>which 参数</code></p><ul><li>参数：被查看的命令</li></ul><h2 id="find命令"><a href="#find命令" class="headerlink" title="find命令"></a>find命令</h2><p>功能：搜索文件</p><p>语法1按文件名搜索：<code>find 路径 -name 参数</code></p><ul><li>路径，搜索的起始路径</li><li>参数，搜索的关键字，支持通配符<em>， 比如：`</em>`test表示搜索任意以test结尾的文件</li></ul><h2 id="grep命令"><a href="#grep命令" class="headerlink" title="grep命令"></a>grep命令</h2><p>功能：过滤关键字</p><p>语法：<code>grep [-n] 关键字 文件路径</code></p><ul><li>选项-n，可选，表示在结果中显示匹配的行的行号。</li><li>参数，关键字，必填，表示过滤的关键字，带有空格或其它特殊符号，建议使用””将关键字包围起来</li><li>参数，文件路径，必填，表示要过滤内容的文件路径，可作为内容输入端口</li></ul><blockquote><p>参数文件路径，可以作为管道符的输入</p></blockquote><h2 id="wc命令"><a href="#wc命令" class="headerlink" title="wc命令"></a>wc命令</h2><p>功能：统计</p><p>语法：<code>wc [-c -m -l -w] 文件路径</code></p><ul><li>选项，-c，统计bytes数量</li><li>选项，-m，统计字符数量</li><li>选项，-l，统计行数</li><li>选项，-w，统计单词数量</li><li>参数，文件路径，被统计的文件，可作为内容输入端口</li></ul><blockquote><p>参数文件路径，可作为管道符的输入</p></blockquote><h2 id="管道符"><a href="#管道符" class="headerlink" title="管道符|"></a>管道符|</h2><p>写法：<code>|</code></p><p>功能：将符号左边的结果，作为符号右边的输入</p><p>示例：</p><p><code>cat a.txt | grep itheima</code>，将cat a.txt的结果，作为grep命令的输入，用来过滤<code>itheima</code>关键字</p><p>可以支持嵌套：</p><p><code>cat a.txt | grep itheima | grep itcast</code></p><h2 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a>echo命令</h2><p>功能：输出内容</p><p>语法：<code>echo 参数</code></p><ul><li>参数：被输出的内容</li></ul><h2 id="反引号"><a href="#反引号" class="headerlink" title="`反引号"></a>`反引号</h2><p>功能：被两个反引号包围的内容，会作为命令执行</p><p>示例：</p><ul><li>echo `pwd`，会输出当前工作目录</li></ul><h2 id="tail命令"><a href="#tail命令" class="headerlink" title="tail命令"></a>tail命令</h2><p>功能：查看文件尾部内容</p><p>语法：<code>tail [-f] 参数</code></p><ul><li>参数：被查看的文件</li><li>选项：-f，持续跟踪文件修改</li></ul><h2 id="head命令"><a href="#head命令" class="headerlink" title="head命令"></a>head命令</h2><p>功能：查看文件头部内容</p><p>语法：<code>head [-n] 参数</code></p><ul><li>参数：被查看的文件</li><li>选项：-n，查看的行数</li></ul><h2 id="重定向符"><a href="#重定向符" class="headerlink" title="重定向符"></a>重定向符</h2><p>功能：将符号左边的结果，输出到右边指定的文件中去</p><ul><li><code>&gt;</code>，表示覆盖输出</li><li><code>&gt;&gt;</code>，表示追加输出</li></ul><h2 id="vi编辑器"><a href="#vi编辑器" class="headerlink" title="vi编辑器"></a>vi编辑器</h2><h3 id="命令模式快捷键"><a href="#命令模式快捷键" class="headerlink" title="命令模式快捷键"></a>命令模式快捷键</h3><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027215841.png" alt="image-20221027215841573"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027215846.png" alt="image-20221027215846581"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027215849.png" alt="image-20221027215849668"></p><h3 id="底线命令快捷键"><a href="#底线命令快捷键" class="headerlink" title="底线命令快捷键"></a>底线命令快捷键</h3><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027215858.png" alt="image-20221027215858967"></p><h2 id="命令的选项"><a href="#命令的选项" class="headerlink" title="命令的选项"></a>命令的选项</h2><p>我们学习的一系列Linux命令，它们所拥有的选项都是非常多的。</p><p>比如，简单的ls命令就有：-a -A -b -c -C -d -D -f -F -g -G -h -H -i -I -k -l -L -m -n -N -o -p -q -Q -r-R -s -S -t -T -u -U -v -w -x -X -1等选项，可以发现选项是极其多的。</p><p>课程中， 并不会将全部的选项都进行讲解，否则，一个ls命令就可能讲解2小时之久。</p><p>课程中，会对常见的选项进行讲解， 足够满足绝大多数的学习、工作场景。</p><h3 id="查看命令的帮助"><a href="#查看命令的帮助" class="headerlink" title="查看命令的帮助"></a>查看命令的帮助</h3><p>可以通过：<code>命令 --help</code>查看命令的帮助手册</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220005.png" alt="image-20221027220005610"></p><h3 id="查看命令的详细手册"><a href="#查看命令的详细手册" class="headerlink" title="查看命令的详细手册"></a>查看命令的详细手册</h3><p>可以通过：<code>man 命令</code>查看某命令的详细手册</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220010.png" alt="image-20221027220009949"></p><h1 id="Linux常用操作"><a href="#Linux常用操作" class="headerlink" title="Linux常用操作"></a>Linux常用操作</h1><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><ul><li>CentOS系统使用：<ul><li>yum [install remove search] [-y] 软件名称<ul><li>install 安装</li><li>remove 卸载</li><li>search 搜索</li><li>-y，自动确认</li></ul></li></ul></li><li>Ubuntu系统使用<ul><li>apt [install remove search] [-y] 软件名称<ul><li>install 安装</li><li>remove 卸载</li><li>search 搜索</li><li>-y，自动确认</li></ul></li></ul></li></ul><blockquote><p>yum 和 apt 均需要root权限</p></blockquote><h2 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h2><p>功能：控制系统服务的启动关闭等</p><p>语法：<code>systemctl start | stop | restart | disable | enable | status 服务名</code></p><ul><li>start，启动</li><li>stop，停止</li><li>status，查看状态</li><li>disable，关闭开机自启</li><li>enable，开启开机自启</li><li>restart，重启</li></ul><h2 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h2><p>功能：创建文件、文件夹软链接（快捷方式）</p><p>语法：<code>ln -s 参数1 参数2</code></p><ul><li>参数1：被链接的</li><li>参数2：要链接去的地方（快捷方式的名称和存放位置）</li></ul><h2 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h2><p>语法：<code>date [-d] [+格式化字符串]</code></p><ul><li><p>-d 按照给定的字符串显示日期，一般用于日期计算</p></li><li><p>格式化字符串：通过特定的字符串标记，来控制显示的日期格式</p><ul><li>%Y   年%y   年份后两位数字 (00..99)</li><li>%m   月份 (01..12)</li><li>%d   日 (01..31)</li><li>%H   小时 (00..23)</li><li>%M   分钟 (00..59)</li><li>%S   秒 (00..60)</li><li>%s   自 1970-01-01 00:00:00 UTC 到现在的秒数</li></ul></li></ul><p>示例：</p><ul><li><p>按照2022-01-01的格式显示日期</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220514.png" alt="image-20221027220514640"></p></li><li><p>按照2022-01-01 10:00:00的格式显示日期</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220525.png" alt="image-20221027220525625"></p></li><li><p>-d选项日期计算</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220429.png" alt="image-20221027220429831"></p><ul><li><p>支持的时间标记为：</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220449.png" alt="image-20221027220449312"></p></li></ul></li></ul><h2 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h2><p>修改时区为中国时区</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220554.png" alt="image-20221027220554654"></p><h2 id="ntp"><a href="#ntp" class="headerlink" title="ntp"></a>ntp</h2><p>功能：同步时间</p><p>安装：<code>yum install -y ntp</code></p><p>启动管理：<code>systemctl start | stop | restart | status | disable | enable ntpd</code></p><p>手动校准时间：<code>ntpdate -u ntp.aliyun.com</code></p><h2 id="ip地址"><a href="#ip地址" class="headerlink" title="ip地址"></a>ip地址</h2><p>格式：a.b.c.d</p><ul><li>abcd为0~255的数字</li></ul><p>特殊IP：</p><ul><li>127.0.0.1，表示本机</li><li>0.0.0.0<ul><li>可以表示本机</li><li>也可以表示任意IP（看使用场景）</li></ul></li></ul><p>查看ip：<code>ifconfig</code></p><h2 id="主机名"><a href="#主机名" class="headerlink" title="主机名"></a>主机名</h2><p>功能：Linux系统的名称</p><p>查看：<code>hostname</code></p><p>设置：<code>hostnamectl set-hostname 主机名</code></p><h2 id="配置VMware固定IP"><a href="#配置VMware固定IP" class="headerlink" title="配置VMware固定IP"></a>配置VMware固定IP</h2><ol><li><p>修改VMware网络，参阅PPT，图太多</p></li><li><p>设置Linux内部固定IP</p><p>修改文件：<code>/etc/sysconfig/network-scripts/ifcfg-ens33</code></p><p>示例文件内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">TYPE=&quot;Ethernet&quot;</span><br><span class="line">PROXY_METHOD=&quot;none&quot;</span><br><span class="line">BROWSER_ONLY=&quot;no&quot;</span><br><span class="line">BOOTPROTO=&quot;static&quot;# 改为static，固定IP</span><br><span class="line">DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6INIT=&quot;yes&quot;</span><br><span class="line">IPV6_AUTOCONF=&quot;yes&quot;</span><br><span class="line">IPV6_DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV6_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span><br><span class="line">NAME=&quot;ens33&quot;</span><br><span class="line">UUID=&quot;1b0011cb-0d2e-4eaa-8a11-af7d50ebc876&quot;</span><br><span class="line">DEVICE=&quot;ens33&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br><span class="line">IPADDR=&quot;192.168.88.131&quot;# IP地址，自己设置，要匹配网络范围</span><br><span class="line">NETMASK=&quot;255.255.255.0&quot;# 子网掩码，固定写法255.255.255.0</span><br><span class="line">GATEWAY=&quot;192.168.88.2&quot;# 网关，要和VMware中配置的一致</span><br><span class="line">DNS1=&quot;192.168.88.2&quot;# DNS1服务器，和网关一致即可</span><br></pre></td></tr></table></figure></li></ol><h2 id="ps命令"><a href="#ps命令" class="headerlink" title="ps命令"></a>ps命令</h2><p>功能：查看进程信息</p><p>语法：<code>ps -ef</code>，查看全部进程信息，可以搭配grep做过滤：<code>ps -ef | grep xxx</code></p><h2 id="kill命令"><a href="#kill命令" class="headerlink" title="kill命令"></a>kill命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221303.png" alt="image-20221027221303037"></p><h2 id="nmap命令"><a href="#nmap命令" class="headerlink" title="nmap命令"></a>nmap命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221241.png" alt="image-20221027221241123"></p><h2 id="netstat命令"><a href="#netstat命令" class="headerlink" title="netstat命令"></a>netstat命令</h2><p>功能：查看端口占用</p><p>用法：<code>netstat -anp | grep xxx</code></p><h2 id="ping命令"><a href="#ping命令" class="headerlink" title="ping命令"></a>ping命令</h2><p>测试网络是否联通</p><p>语法：<code>ping [-c num] 参数</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221129.png" alt="image-20221027221129782"></p><h2 id="wget命令"><a href="#wget命令" class="headerlink" title="wget命令"></a>wget命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221149.png" alt="image-20221027221148964"></p><h2 id="curl命令"><a href="#curl命令" class="headerlink" title="curl命令"></a>curl命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221201.png" alt="image-20221027221201079"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221210.png" alt="image-20221027221210518"></p><h2 id="top命令"><a href="#top命令" class="headerlink" title="top命令"></a>top命令</h2><p>功能：查看主机运行状态</p><p>语法：<code>top</code>，查看基础信息</p><p>可用选项：</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221340.png" alt="image-20221027221340729"></p><p>交互式模式中，可用快捷键：</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221354.png" alt="image-20221027221354137"></p><h2 id="df命令"><a href="#df命令" class="headerlink" title="df命令"></a>df命令</h2><p>查看磁盘占用</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221413.png" alt="image-20221027221413787"></p><h2 id="iostat命令"><a href="#iostat命令" class="headerlink" title="iostat命令"></a>iostat命令</h2><p>查看CPU、磁盘的相关信息</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221440.png" alt="image-20221027221439990"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221514.png" alt="image-20221027221514237"></p><h2 id="sar命令"><a href="#sar命令" class="headerlink" title="sar命令"></a>sar命令</h2><p>查看网络统计</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221545.png" alt="image-20221027221545822"></p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><ul><li>临时设置：export 变量名=变量值</li><li>永久设置：<ul><li>针对用户，设置用户HOME目录内：<code>.bashrc</code>文件</li><li>针对全局，设置<code>/etc/profile</code></li></ul></li></ul><h3 id="PATH变量"><a href="#PATH变量" class="headerlink" title="PATH变量"></a>PATH变量</h3><p>记录了执行程序的搜索路径</p><p>可以将自定义路径加入PATH内，实现自定义命令在任意地方均可执行的效果</p><h2 id="符号"><a href="#符号" class="headerlink" title="$符号"></a>$符号</h2><p>可以取出指定的环境变量的值</p><p>语法：<code>$变量名</code></p><p>示例：</p><p><code>echo $PATH</code>，输出PATH环境变量的值</p><p><code>echo $&#123;PATH&#125;ABC</code>，输出PATH环境变量的值以及ABC</p><p>如果变量名和其它内容混淆在一起，可以使用${}</p><h2 id="压缩解压"><a href="#压缩解压" class="headerlink" title="压缩解压"></a>压缩解压</h2><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><p><code>tar -zcvf 压缩包 被压缩1...被压缩2...被压缩N</code></p><ul><li>-z表示使用gzip，可以不写</li></ul><p><code>zip [-r] 参数1 参数2 参数N</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221906.png" alt="image-20221027221906247"></p><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p><code>tar -zxvf 被解压的文件 -C 要解压去的地方</code></p><ul><li>-z表示使用gzip，可以省略</li><li>-C，可以省略，指定要解压去的地方，不写解压到当前目录</li></ul><p><code>unzip [-d] 参数</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221939.png" alt="image-20221027221939899"></p><h2 id="su命令"><a href="#su命令" class="headerlink" title="su命令"></a>su命令</h2><p>切换用户</p><p>语法：<code>su [-] [用户]</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222021.png" alt="image-20221027222021619"></p><h2 id="sudo命令"><a href="#sudo命令" class="headerlink" title="sudo命令"></a>sudo命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222035.png" alt="image-20221027222035337"></p><p>比如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">itheima ALL=(ALL)       NOPASSWD: ALL</span><br></pre></td></tr></table></figure><p>在visudo内配置如上内容，可以让itheima用户，无需密码直接使用<code>sudo</code></p><h2 id="chmod命令"><a href="#chmod命令" class="headerlink" title="chmod命令"></a>chmod命令</h2><p>修改文件、文件夹权限</p><p>语法：<code>chmod [-R] 权限 参数</code></p><ul><li><p>权限，要设置的权限，比如755，表示：<code>rwxr-xr-x</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222157.png" alt="image-20221027222157276"></p></li><li><p>参数，被修改的文件、文件夹</p></li><li><p>选项-R，设置文件夹和其内部全部内容一样生效</p></li></ul><h2 id="chown命令"><a href="#chown命令" class="headerlink" title="chown命令"></a>chown命令</h2><p>修改文件、文件夹所属用户、组</p><p>语法：<code>chown [-R] [用户][:][用户组] 文件或文件夹</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222326.png" alt="image-20221027222326192"></p><h2 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222354.png" alt="image-20221027222354498"></p><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222407.png" alt="image-20221027222407618"></p><h2 id="genenv命令"><a href="#genenv命令" class="headerlink" title="genenv命令"></a>genenv命令</h2><ul><li><p><code>getenv group</code>，查看系统全部的用户组</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222446.png" alt="image-20221027222446514"></p></li><li><p><code>getenv passwd</code>，查看系统全部的用户</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222512.png" alt="image-20221027222512274"></p></li></ul><h2 id="env命令"><a href="#env命令" class="headerlink" title="env命令"></a>env命令</h2><p>查看系统全部的环境变量</p><p>语法：<code>env</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux基础命令&quot;&gt;&lt;a href=&quot;#Linux基础命令&quot; class=&quot;headerlink&quot; title=&quot;Linux基础命令&quot;&gt;&lt;/a&gt;Linux基础命令&lt;/h1&gt;&lt;h2 id=&quot;Linux的目录结构&quot;&gt;&lt;a href=&quot;#Linux的目录结构&quot; cla</summary>
      
    
    
    
    <category term="理论" scheme="https://zhr0529.cn/categories/%E7%90%86%E8%AE%BA/"/>
    
    
    <category term="Linux" scheme="https://zhr0529.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>【理论】51单片机学习笔记（AI8051U，32bit）</title>
    <link href="https://zhr0529.cn/posts/d0b57adf.html"/>
    <id>https://zhr0529.cn/posts/d0b57adf.html</id>
    <published>2025-03-30T03:07:22.000Z</published>
    <updated>2025-03-30T03:17:01.364Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在最开始的"><a href="#在最开始的" class="headerlink" title="在最开始的"></a>在最开始的</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAIN_Fosc24000UL</span></span><br></pre></td></tr></table></figure><blockquote><p>定义主频为24.000MHz</p></blockquote><p>在main函数中，开头可添加如下代码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EAXFR = <span class="number">1</span>; <span class="comment">// 使能扩展的特殊寄存器</span></span><br><span class="line">WTST = <span class="number">0x00</span>; <span class="comment">// 设置代码等待时间为0，CPU 执行程序的速度最快 </span></span><br><span class="line">CKCON = <span class="number">0x00</span>; <span class="comment">// 设置外部总线速度最快</span></span><br></pre></td></tr></table></figure><br>以使得程序运行速度最快</p><hr><h2 id="点亮一个LED"><a href="#点亮一个LED" class="headerlink" title="点亮一个LED"></a>点亮一个LED</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sbit LED1 = P0 ^ <span class="number">0</span>;</span><br><span class="line">sbit LED2 = P0 ^ <span class="number">1</span>;</span><br></pre></td></tr></table></figure><blockquote><p> LED1的对应引脚是P00<br> LED2的对应引脚是P01</p></blockquote><p>以上代码一般添加在最开头（main函数之前）<br><strong>用来定义引脚</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">P0M1 = <span class="number">0x00</span>; P0M0 = <span class="number">0x00</span>；</span><br></pre></td></tr></table></figure><blockquote><p>将P0端口的所有引脚都设置为<strong>推挽输出</strong>模式</p></blockquote><p>因为要使用P0引脚，以上代码暂且理解为初始化<br>（目前这么理解 2025.3.29，知道具体为什么来还愿）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LED1 = <span class="number">0</span>; </span><br><span class="line">LED2 = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><blockquote><p>LED1输出低电平，LED2输出高电平</p></blockquote><p>通过输出高低电平控制LED亮灭</p><hr><h2 id="编程实现LED闪烁-amp-LED流水灯-amp-数码管显示"><a href="#编程实现LED闪烁-amp-LED流水灯-amp-数码管显示" class="headerlink" title="编程实现LED闪烁&amp;LED流水灯&amp;数码管显示"></a>编程实现LED闪烁&amp;LED流水灯&amp;数码管显示</h2><h3 id="LED闪烁"><a href="#LED闪烁" class="headerlink" title="LED闪烁"></a>LED闪烁</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LED1 = ON;</span><br><span class="line">delay_ms(<span class="number">500</span>);</span><br><span class="line">LED1 = OFF;</span><br><span class="line">delay_ms(<span class="number">500</span>);</span><br></pre></td></tr></table></figure><blockquote><p>很简单，在LED亮灭间穿插延时就好了</p></blockquote><h3 id="LED流水灯-amp-数码管显示"><a href="#LED流水灯-amp-数码管显示" class="headerlink" title="LED流水灯&amp;数码管显示"></a>LED流水灯&amp;数码管显示</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">u8 code LED_Index[] = &#123;<span class="number">0x01</span>,<span class="number">0x02</span>,<span class="number">0x04</span>,<span class="number">0x08</span>,<span class="number">0x10</span>,<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x80</span>&#125;;</span><br><span class="line"></span><br><span class="line">u8 code SEG_Index[] = &#123;<span class="number">0x3F</span>,<span class="number">0x06</span>,<span class="number">0x5B</span>,<span class="number">0x4F</span>,<span class="number">0x66</span>,<span class="number">0x6d</span>,<span class="number">0x7d</span>,<span class="number">0x07</span>,<span class="number">0x7f</span>,<span class="number">0x6f</span>&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>LED数组的作用，通过十六进制转二进制可以得到LED阵列的状态。如0x08就代表00001000，可得出LED状态</p><p>SEG数组的作用，通过不同的十六进制可让数码管显示不同的字符，如0x3F代表1，0x06代表2</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">blink_3</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">static</span> u8 j;</span><br><span class="line">P2 = LED_Index[j];</span><br><span class="line">j++;</span><br><span class="line"><span class="keyword">if</span>(j &gt; <span class="number">8</span>) j = <span class="number">0</span>;</span><br><span class="line">delay_ms(<span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">blink_4</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">static</span> u8 k;</span><br><span class="line">P0 = SEG_Index[k];</span><br><span class="line">k++;</span><br><span class="line"><span class="keyword">if</span>(k &gt; <span class="number">9</span>) k = <span class="number">0</span>;</span><br><span class="line">delay_ms(<span class="number">500</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>顺着数组做for循环，通过前面定义好的数组就可以实现LED流水灯或数码管计数了</p></blockquote><hr><h2 id="I-O输入与输出控制按键"><a href="#I-O输入与输出控制按键" class="headerlink" title="I/O输入与输出控制按键"></a>I/O输入与输出控制按键</h2><h3 id="按键检测代码"><a href="#按键检测代码" class="headerlink" title="==按键检测代码=="></a>==按键检测代码==</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    delay_ms(<span class="number">20</span>); <span class="comment">// 延时20毫秒</span></span><br><span class="line">    <span class="keyword">if</span>(KEY1 == <span class="number">0</span>) <span class="comment">// 检测按键KEY1是否被按下</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &gt; <span class="number">3</span>) i = <span class="number">0</span>; </span><br><span class="line">        P2 = LED[i]; <span class="comment">// 将P2端口的输出设置为LED数组的第i个元素</span></span><br><span class="line">        i++;</span><br><span class="line">        <span class="keyword">while</span>(KEY1 == <span class="number">0</span>); <span class="comment">// 等待按键释放（按键防抖或按键长按处理）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意需要添加消抖延迟函数 &amp; 等待按键释放的while函数</strong></p></blockquote><h3 id="延时代码"><a href="#延时代码" class="headerlink" title="==延时代码=="></a>==延时代码==</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">delay_ms</span><span class="params">(u16 ms)</span></span><br><span class="line">&#123;</span><br><span class="line">    u16 i;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        i = MAIN_Fosc / <span class="number">6000</span>;</span><br><span class="line">        <span class="keyword">while</span>(--i);</span><br><span class="line">    &#125;<span class="keyword">while</span>(--ms);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>例：需要延时200ms → delay_ms(200)</p></blockquote><hr><h2 id="定时器中断"><a href="#定时器中断" class="headerlink" title="定时器中断"></a>定时器中断</h2><p>需要去ISP软件中选择“定时器计算器”工具，生成所需要的定时器初始化函数与定时器执行函数。</p><h3 id="例：主频为24-000MHz进行500毫秒中断的定时器函数"><a href="#例：主频为24-000MHz进行500毫秒中断的定时器函数" class="headerlink" title="例：主频为24.000MHz进行500毫秒中断的定时器函数"></a>例：主频为24.000MHz进行500毫秒中断的定时器函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Timer0_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">TM0PS = <span class="number">0x0F</span>;</span><br><span class="line">AUXR &amp;= <span class="number">0x7F</span>;</span><br><span class="line">TMOD &amp;= <span class="number">0xF0</span>;</span><br><span class="line">TL0 = <span class="number">0xDC</span>;</span><br><span class="line">TH0 = <span class="number">0x0B</span>;</span><br><span class="line">TF0 = <span class="number">0</span>;</span><br><span class="line">TR0 = <span class="number">1</span>;</span><br><span class="line">ET0 = <span class="number">1</span>;</span><br><span class="line">EA=<span class="number">1</span>；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>==注意！==</p><ul><li>一定要有EA=1定时器中断才能正常开启。</li><li>需要在main函数中进行初始化：<pre><code>  **Timer0_Init();**</code></pre></li></ul><h3 id="定时器执行函数"><a href="#定时器执行函数" class="headerlink" title="定时器执行函数"></a>定时器执行函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Timer0_Isr</span><span class="params">(<span class="type">void</span>)</span> interrupt 1</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//在这里编写需要执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="定时器的周期调用"><a href="#定时器的周期调用" class="headerlink" title="定时器的周期调用"></a>定时器的周期调用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">u16 Count_ms[<span class="number">3</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">u8 state1=<span class="number">1</span>, state2=<span class="number">1</span>, state3=<span class="number">1</span>, state4=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Timer0_Isr</span><span class="params">(<span class="type">void</span>)</span> interrupt 1</span><br><span class="line">&#123;</span><br><span class="line">u8 i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">Count_ms[i]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(Count_ms[<span class="number">0</span>]&gt;=<span class="number">300</span>)</span><br><span class="line">&#123;</span><br><span class="line">Count_ms[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">state1 = !state1;</span><br><span class="line">P20 = state1;</span><br><span class="line">P23 = !state1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(Count_ms[<span class="number">1</span>]&gt;=<span class="number">600</span>)</span><br><span class="line">&#123;</span><br><span class="line">Count_ms[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">state2 = !state2;</span><br><span class="line">P21 = state2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(Count_ms[<span class="number">2</span>]&gt;=<span class="number">900</span>)</span><br><span class="line">&#123;</span><br><span class="line">Count_ms[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">state3 = !state3;</span><br><span class="line">P22 = state3;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(state1==<span class="number">0</span> &amp;&amp; state2==<span class="number">0</span> &amp;&amp; state3==<span class="number">0</span>) P24=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> P24=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定时器中断的进阶用法：<br>通过定义三个不同阈值的计数器，定时器每中断一次，计数器加一。<br>实现在300ms，600ms，900ms时分别中断执行不同任务</li></ul><hr><h2 id="数码管与定时器"><a href="#数码管与定时器" class="headerlink" title="数码管与定时器"></a>数码管与定时器</h2><p><em>任务：按下KEY1，数码管开始计时(如00:00:00)， 按下KEY2，数码管显示年月日(如2024:12:11)， 按下KEY3，数码管计时暂停，再按一下KEY3又恢复计时 按下KEY4，数码管计时清零。</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        delay_ms(<span class="number">20</span>);</span><br><span class="line">        <span class="keyword">if</span>(P31 ==<span class="number">0</span>)&#123;  </span><br><span class="line">            state=<span class="number">1</span>;  </span><br><span class="line">            <span class="keyword">while</span>(P30==<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(P30 == <span class="number">0</span>)&#123;  </span><br><span class="line">            state=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(P31==<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(P32 == <span class="number">0</span>)&#123;  </span><br><span class="line">            <span class="keyword">if</span>(state==<span class="number">1</span>)&#123;</span><br><span class="line">                state=<span class="number">2</span>;  </span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(state==<span class="number">2</span>)&#123;</span><br><span class="line">                state=<span class="number">1</span>; </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(P32==<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(P33 == <span class="number">0</span>)&#123; </span><br><span class="line">            miao=fen=shi=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(P33==<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">switch</span>(state)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:seg_date();<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:seg_count();<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:seg_count_pause();<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>在while1中持续检测按键情况，哪个按键被按下则执行相对应的任务</p></blockquote><h3 id="数码管显示日期"><a href="#数码管显示日期" class="headerlink" title="数码管显示日期"></a>数码管显示日期</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">seg</span><span class="params">(u8 loc, u16 num)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span>(loc)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:P24=<span class="number">1</span>;P23=<span class="number">1</span>;P22=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:P24=<span class="number">1</span>;P23=<span class="number">1</span>;P22=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:P24=<span class="number">1</span>;P23=<span class="number">0</span>;P22=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:P24=<span class="number">1</span>;P23=<span class="number">0</span>;P22=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:P24=<span class="number">0</span>;P23=<span class="number">1</span>;P22=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:P24=<span class="number">0</span>;P23=<span class="number">1</span>;P22=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:P24=<span class="number">0</span>;P23=<span class="number">0</span>;P22=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:P24=<span class="number">0</span>;P23=<span class="number">0</span>;P22=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    P0=SEG_NUM[num];</span><br><span class="line">    delay_ms(<span class="number">1</span>); <span class="comment">//延时的目的是为了让数码管有足够的时间显示当前的数字，避免显示闪烁</span></span><br><span class="line">    P0 = <span class="number">0x00</span>;  <span class="comment">//在显示下一个数字之前，先将当前的显示清除，避免串扰</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 该函数用于在不同的数码管位置显示不同的数字，每个case对应一个数码管的位置</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">seg_date</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    seg(<span class="number">1</span>,<span class="number">2</span>);seg(<span class="number">2</span>,<span class="number">0</span>);seg(<span class="number">3</span>,<span class="number">2</span>);seg(<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">    seg(<span class="number">5</span>,<span class="number">0</span>);seg(<span class="number">6</span>,<span class="number">1</span>);seg(<span class="number">7</span>,<span class="number">0</span>);seg(<span class="number">8</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如何用数码管显示20250101</p></blockquote><h3 id="数码管显示计数器"><a href="#数码管显示计数器" class="headerlink" title="数码管显示计数器"></a>数码管显示计数器</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Timer0_Isr</span><span class="params">(<span class="type">void</span>)</span> interrupt 1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(state==<span class="number">1</span>)&#123; </span><br><span class="line">        miao ++;</span><br><span class="line">        <span class="keyword">if</span>( miao&gt;<span class="number">59</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            miao = <span class="number">0</span>;</span><br><span class="line">            fen++;</span><br><span class="line">            <span class="keyword">if</span>( fen&gt;<span class="number">59</span> )</span><br><span class="line">            &#123;</span><br><span class="line">                fen = <span class="number">0</span>;</span><br><span class="line">                shi ++;</span><br><span class="line">                <span class="keyword">if</span>( shi&gt;<span class="number">23</span> )</span><br><span class="line">                    shi = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>利用定时器中断进行时分秒计数</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">seg_count_pause</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    seg(<span class="number">1</span>,shi/<span class="number">10</span>);seg(<span class="number">2</span>,shi%<span class="number">10</span>);seg(<span class="number">3</span>,SEG_NUM[<span class="number">16</span>]);seg(<span class="number">4</span>,fen/<span class="number">10</span>);</span><br><span class="line">    seg(<span class="number">5</span>,fen%<span class="number">10</span>);seg(<span class="number">6</span>,SEG_NUM[<span class="number">16</span>]);seg(<span class="number">7</span>,miao/<span class="number">10</span>);seg(<span class="number">8</span>,miao%<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>将计数器显示在数码管上</p></blockquote><hr><h2 id="PWM"><a href="#PWM" class="headerlink" title="PWM"></a>PWM</h2><p><em>任务：PWM驱动电机，按键K1按下，电机转速提高(一共三档)，按键K2按下，电机转速减慢，按键K3按下，电机停止</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">delay_ms(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">if</span>(P31==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">Speed++;</span><br><span class="line"><span class="keyword">if</span>(Speed &gt; <span class="number">3</span>) Speed = <span class="number">3</span>; </span><br><span class="line"><span class="keyword">while</span>(P31==<span class="number">0</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span>(P30==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">Speed--;</span><br><span class="line"><span class="keyword">if</span>(Speed &lt; <span class="number">0</span>) Speed= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(P30==<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(P33==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">Speed = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(P33==<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span>(Speed)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>: Compare = <span class="number">0</span>; <span class="keyword">break</span>;    </span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: Compare = <span class="number">50</span>; <span class="keyword">break</span>;   </span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: Compare = <span class="number">75</span>; <span class="keyword">break</span>;   </span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>: Compare = <span class="number">100</span>; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">seg(<span class="number">1</span>,Speed);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>一个普通的按键检测代码，按下对应按键执行对应速度并在数码管显示</p></blockquote><h3 id="通过定时器中断来控制电机的占空比（PWM功能）"><a href="#通过定时器中断来控制电机的占空比（PWM功能）" class="headerlink" title="通过定时器中断来控制电机的占空比（PWM功能）"></a>通过定时器中断来控制电机的占空比（PWM功能）</h3><p>先上定时器中断执行代码：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Timer0_Isr</span><span class="params">(<span class="type">void</span>)</span> interrupt 1</span><br><span class="line">&#123;</span><br><span class="line">TL0 = <span class="number">0x38</span>;</span><br><span class="line">TH0 = <span class="number">0xFF</span>;</span><br><span class="line">counter++;</span><br><span class="line">counter%=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">if</span>(counter&lt;Compare)</span><br><span class="line">&#123;</span><br><span class="line">motor = <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">motor = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><u>逐步分析：</u></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TL0 = <span class="number">0x38</span>;</span><br><span class="line">TH0 = <span class="number">0xFF</span>;</span><br></pre></td></tr></table></figure><ul><li><code>TL0</code> 和 <code>TH0</code> 是定时器0的低8位和高8位寄存器。<br>这两行代码的作用是重新装载定时器0的初始值<ul><li><code>0x38</code> 和 <code>0xFF</code> 是定时器的初始值，具体数值取决于单片机的时钟频率和定时器的模式。这些值决定了定时器溢出的时间间隔</li><li>每当定时器溢出时，就会触发中断，执行这个中断服务例程。</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">counter++;</span><br><span class="line">counter %= <span class="number">100</span>;</span><br></pre></td></tr></table></figure><blockquote><p>用于记录定时器中断的次数，当等于100时清零</p></blockquote><h3 id="PWM逻辑"><a href="#PWM逻辑" class="headerlink" title="==PWM逻辑=="></a>==PWM逻辑==</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (counter &lt; Compare)</span><br><span class="line">    motor = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    motor = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>Compare表示PWM的<u>占空比阈值</u></p><ul><li><p>这段代码的作用是根据计数器的值和占空比阈值来控制电机的状态：</p><ul><li><p>如果 <code>counter</code> 小于 <code>Compare</code>，则将 <code>motor</code> 设置为1（表示电机开启或输出高电平）。</p></li><li><p>如果 <code>counter</code> 大于或等于 <code>Compare</code>，则将 <code>motor</code> 设置为0（表示电机关闭或输出低电平）。</p></li></ul></li></ul><p>通过调整 <code>Compare</code> 的值，可以改变PWM的占空比，从而控制电机的速度或功率</p><h3 id="PWM原理"><a href="#PWM原理" class="headerlink" title="==PWM原理=="></a>==PWM原理==</h3><ul><li><p><strong>占空比</strong>：占空比是指在一个周期内，高电平时间与总周期时间的比例。例如，如果占空比为50%，则在一个周期内，高电平和低电平各占一半时间。</p></li><li><p>在这段代码中，<code>counter</code> 的范围是0到99，总共100个计数值。<code>Compare</code> 的值决定了高电平的持续时间。例如：</p><ul><li><p>如果 <code>Compare</code> = 50，则高电平持续50个计数值，占空比为50%。</p></li><li><p>如果 <code>Compare</code> = 20，则高电平持续20个计数值，占空比为20%。</p></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;在最开始的&quot;&gt;&lt;a href=&quot;#在最开始的&quot; class=&quot;headerlink&quot; title=&quot;在最开始的&quot;&gt;&lt;/a&gt;在最开始的&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr</summary>
      
    
    
    
    <category term="理论" scheme="https://zhr0529.cn/categories/%E7%90%86%E8%AE%BA/"/>
    
    
    <category term="STM51" scheme="https://zhr0529.cn/tags/STM51/"/>
    
  </entry>
  
  <entry>
    <title>（杂）旅游攻略合集</title>
    <link href="https://zhr0529.cn/posts/f29f6b73.html"/>
    <id>https://zhr0529.cn/posts/f29f6b73.html</id>
    <published>2025-01-22T03:46:38.000Z</published>
    <updated>2025-02-04T03:09:24.968Z</updated>
    
    <content type="html"><![CDATA[<p>此帖为记录近年自己旅游有意识的进行规划的旅游路线，给时光以生命。也为会来浏览我个人博客的人们一些旅游路线参考。</p><h2 id="天津"><a href="#天津" class="headerlink" title="天津"></a>天津</h2><p>时间：2023.6.29 - 7.1</p><p><code>day 1</code> 中午到达，晚上去德云社看了相声，200r/人，相当不错</p><p><code>day 2</code> 乘坐环城巴士游览，路线：天津之眼——大悲禅院——金刚桥——三岔河口——古文化街——官银号——鼓楼商业街——南市食品街——北安桥——津门津塔——天津规划展览馆——意大利风情街——大沽桥——解放桥——世纪钟广场——津湾广场——天津站——袁世凯故居——冯国璋故居——玻璃桥——李叔同故居——海河亲水平台——狮子林桥——望海楼教堂——引滦入津纪念碑——天津之眼</p><p>然后晚上去打球，感受天津强度😝</p><p><code>day 3</code> 中午去滨江道步行街，其实感觉每个地方的步行街都大同小异。去天津狗不理包子总店吃了午饭，相当一般。</p><p>天津景点之一瓷房子，没什么好看的。晚上坐了天津之眼摩天轮，不愧是第一大水上摩天轮，确实不错。</p><h2 id="广州-澳门-香港"><a href="#广州-澳门-香港" class="headerlink" title="广州 - 澳门 - 香港"></a>广州 - 澳门 - 香港</h2><p>时间：2023.7.8 - 7.13</p><p><code>day 1</code> 下午到达，晚上：广州塔 - 海心桥 - 在广州塔下的公园听小年轻唱粤语歌</p><p><code>day 2</code> 参观越秀王墓，没什么好看的除了下去墓葬实地内部参观有意思 - 晚上逛了逛商场</p><p><code>day 3</code> 前往澳门，从珠海的横琴口岸乘坐酒店的发财车入住金沙度假村。晚上澳门的叔叔请我们吃了葡萄牙菜。晚上坐轻轨游览： 澳门银河酒店 - 永利皇宫 - 新濠天地 - 摩铂斯 - 伦敦人     其实来澳门参观这些富丽堂皇的酒店建筑就很有意思</p><p><code>day 4</code> 去酒店的游泳池玩了一圈 - 接着去参观巴黎人酒店的埃菲尔铁塔 - 威尼斯人 - 新濠影汇 - 乘坐永利皇宫喷泉缆车 - 坐酒店的港澳快线途经港珠澳大桥前往香港</p><p><code>day 5</code> 香港迪士尼一日游。买了优速通一天刷完🥰🥰 我想如果我是小时候来肯定会很开心，长大了来玩也很开心</p><p><code>day 6</code> 在香港市区玩了一天，早上出门就遇到了传说中的富贵雪糕车，但好像没有很好吃。去维多利亚港看了江景 - 铜锣湾 - 中环 - 坐天星小轮回到江对岸 - 坐香港巴士到故宫文化博物馆附近的江滨道坐着看维多利亚港夜景</p><h2 id="南京一日游"><a href="#南京一日游" class="headerlink" title="南京一日游"></a>南京一日游</h2><p>时间：2023.12.2</p><p>租了一辆电动车游览：梧桐大道 - 明孝陵 - 中山陵 - 美龄宫 - 晚上坐地铁去逛了秦淮河和南京夫子庙，人山人海。</p><p>没预约到南京大屠杀死难者纪念馆很可惜</p><h2 id="泉州"><a href="#泉州" class="headerlink" title="泉州"></a>泉州</h2><p>时间：2024.1.22 - 2024.1.23</p><p><code>day 1</code> 清源山老君岩 - 天后宫 - 浔埔古镇（都是贝壳建筑的小镇，来这才知道这里是簪花真正的起源地） - 郑成功雕像 - 钟楼 - 开元寺（一条路上都是好吃的😍）</p><p><code>day 2</code> 清净寺 - 关岳庙 - 洛阳桥 - 苏延玉故居 - 泉州海运文化博物馆 - 崇武古城 - 南山广化寺</p><h2 id="绍兴一日游"><a href="#绍兴一日游" class="headerlink" title="绍兴一日游"></a>绍兴一日游</h2><p>时间：2024.4.4</p><p>鲁迅故里 - 百草园 - 三味书屋 - 沈氏园（人山人海） - 兰亭 这个可以，人很少环境优美。就是离市区比较远       </p><h2 id="上海（鸣谢hkl，lsh）"><a href="#上海（鸣谢hkl，lsh）" class="headerlink" title="上海（鸣谢hkl，lsh）"></a>上海（鸣谢hkl，lsh）</h2><p>时间：2024.6.7 - 6.8</p><p><code>day 1</code> 入住徐家汇 - 去静安寺，顺便看了亚洲最大的Apple店，好像也没多大 - 南京路步行街（下午茶吃了莱莱小笼，神中神，除了贵没有任何缺点）- 和平饭店 - 外滩 - 坐船到陆家嘴  - 到上海中心楼顶看了稳定器灯光秀（。）- 花园饭店吃晚饭 - 最后又到外滩边散步，来上海就是要city walk对吧🤭</p><p><code>day 2</code> 武康大楼 - 宋庆龄故居 - 上海中心翠园吃午饭 - 四行仓库 - 中共一大旧址&amp;会址纪念馆</p><h2 id="武汉"><a href="#武汉" class="headerlink" title="武汉"></a>武汉</h2><p>时间：2024.8.1 - 8.4</p><p><code>day 1</code> 古德寺（寺庙偏欧洲中世纪风格很好看，很多鸽子很可爱） - 解放公园 （没什么好逛的）- 黎黄陂路（商业步行街） - 咸安坊 - 江汉路步行街（人山人海）</p><p><code>day 2</code> 湖北省博物馆（大家都约到了门票，赞），主要是看编钟和越王勾践剑  - 武商梦时代吃午饭 - 宝通寺 -  首义公园&amp;博物馆（比较有革命意义） - 黄鹤楼（晚上门票加钱的灯光秀是👎） - 户部巷（很多美食）</p><p><code>day 3</code> 归元寺（就像每个地方都有的普通寺庙） - 古琴台（伯牙绝弦的地方，挺有意义的） - 爬龟山 - 晴川阁 - 长江观景第一台</p><p><code>day 4</code> 东湖风景区（可惜没坐到滑道） - 武汉大学 - 凌波门东湖观景点 - 光谷广场</p><h2 id="霞浦"><a href="#霞浦" class="headerlink" title="霞浦"></a>霞浦</h2><p>时间：2024.8.10 - 8.12</p><p><code>day 1</code> 三都澳旅游景区。这个没啥意思 - 入住东壁村民宿</p><p><code>day 2</code> 三点起来看巴黎奥运会男篮决赛 - 五点去北竹看日出，结果当天雾很大没看成 - 睡回笼觉 - 下午坐快艇前往四礵列岛。不愧是人间塞尔达，确实美啊，有点像澳大利亚的十二使徒。就是海岛上没有信号，且风大太阳大，没有防护措施，还是比较危险的。</p><p><code>day 3</code> 前往福鼎 - 爬太姥山，很多怪石头还是挺有意思的</p><h2 id="昆明-大理-丽江-香格里拉"><a href="#昆明-大理-丽江-香格里拉" class="headerlink" title="昆明 - 大理 - 丽江 - 香格里拉"></a>昆明 - 大理 - 丽江 - 香格里拉</h2><p>时间：2024.8.31 - 9.8</p><p><code>day 1</code> 先去云牵一线品尝了一下云南招牌过桥米线😍好吃量大不贵，人均吃撑40r - 海埂大坝 - 海埂公园 - 西山索道 - 俯瞰滇池 - 龙门索道下山 - 昆明老街吃晚饭 - 途中偶遇暴雨，拼尽全力无法战胜</p><p><code>day 2</code> 翠湖公园 - 国立西南联合大学旧址 - 怪兽大厦 - 前往大理 - 大理古城 - 打车到才村码头看到了洱海日落，绝美 - 晚上回大理古城喝酒                          （大理苦荞啤酒很好喝）</p><p><code>day 3</code> 崇圣寺三塔 - 租车环洱海自驾路线：磻溪S湾 - 廊桥 - 喜洲古镇 - 海舌公园 - 双廊古镇 - 鹿鹅山遗址 - 小普陀</p><p><code>day 4</code> 理想邦 - 洱海公园 - 苍洱大道 -  团山公园 - 出发丽江  </p><p>洱海是真的太漂亮了，水清澈且蓝，天气好的时候很无敌，以后有机会想来这里长住一段时间</p><p><code>day 5</code> 玉龙雪山一日游🤗：乘坐大索道到山顶4680石碑 - 牦牛坪 - 蓝月谷 - 晚上回到丽江古城</p><p>不得不吐槽丽江的天气，我们过去的时候正好是雨季。一会儿雨一会儿晴，山上全是雾什么都看不到</p><p><code>day 6</code> 一早出发香格里拉，民宿老板帮我联系了当地旅游车。沿途游览：上虎跳峡 - 中虎跳 -  哈巴雪山石碑 - 白水台 - 到达香格里拉 - 晚上吃了顿牦牛肉火锅自助有点太顶了 - 游览独克宗古城：龟山公园 - 转经筒 - 大佛寺</p><p><code>day 7</code> 一早驱车两小时前往无底湖（真的美，雪山中的湖泊像一块翡翠） - 大经幡 - 大白塔</p><p><code>day 8</code> 松赞林寺 - 帕纳海（小羊羔太可爱了） - 坐高铁返回丽江乘坐飞机</p><h2 id="南昌-庐山-景德镇-婺源"><a href="#南昌-庐山-景德镇-婺源" class="headerlink" title="南昌 - 庐山 - 景德镇 - 婺源"></a>南昌 - 庐山 - 景德镇 - 婺源</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;此帖为记录近年自己旅游有意识的进行规划的旅游路线，给时光以生命。也为会来浏览我个人博客的人们一些旅游路线参考。&lt;/p&gt;
&lt;h2 id=&quot;天津&quot;&gt;&lt;a href=&quot;#天津&quot; class=&quot;headerlink&quot; title=&quot;天津&quot;&gt;&lt;/a&gt;天津&lt;/h2&gt;&lt;p&gt;时间：2023</summary>
      
    
    
    
    <category term="日记" scheme="https://zhr0529.cn/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>我的简历</title>
    <link href="https://zhr0529.cn/posts/8485e0fd.html"/>
    <id>https://zhr0529.cn/posts/8485e0fd.html</id>
    <published>2024-12-20T04:22:22.000Z</published>
    <updated>2024-12-20T04:46:30.937Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>为了以后应对各种场合写简历时能有更清晰的思路，单开此帖。也顺便记录自己的简历丰富进程，实时更新。</p></blockquote><h2 id="教育背景"><a href="#教育背景" class="headerlink" title="教育背景"></a>教育背景</h2><ul><li>2023-09 ~ 2024-06    <strong>浙江工业大学</strong>  量化金融（本科）</li><li>2024-09 ~ 2028-06    <strong>浙江工业大学</strong>  机器人工程（感知与控制方向）（本科）</li></ul><h2 id="实习经历"><a href="#实习经历" class="headerlink" title="实习经历"></a>实习经历</h2><ul><li><p>2024-07 ~ 2024-09    <strong>福建靠谱云算力技术有限公司</strong></p><p>  ​    &gt; 服务器和终端运营部    云网运维工程师</p></li><li><p><strong>工作内容</strong></p></li></ul><p>​    服务器运维管理：高效参与公司服务器集群的日常监控与故障排查，精通Linux系统操作及服务器配置优化，熟练运用性能监控工具，确保服务器稳定运行。云算力平台运营：协同团队进行云算力平台的维护与升级，优化资源分配与负载均衡，有效处理用户反馈，显著提升平台服务质量与用户体验。虚拟机镜像管理：主导平台老旧镜像升级，全球节点分发新镜像，参与新镜像测试，确保稳定性与可用性。同时，参与底层平台维护，快速响应监控报警，根据反馈调优虚拟机及其宿主机性能，并成功实施业务热迁移处理硬件故障。</p><ul><li><strong>业绩与成果</strong></li></ul><p>​    通过持续学习，进一步提升了专业技能与实际操作能力，深入理解企业运营流程与行业需求，为未来职业发展奠定坚实基础，获得部门领导及同事的一致好评。</p><h2 id="项目经验"><a href="#项目经验" class="headerlink" title="项目经验"></a>项目经验</h2><ul><li>2024-07 ~ 2024-10     <strong>四足仿生机器人 - 快递运送赛中型组赛项</strong></li><li><strong>项目描述</strong></li></ul><p>​    设计四足仿生机器人，模拟快递运送场景，需穿越限高杆、斜坡、分岔路及台阶等地形，并准确送达快递至住户敲响铃铛。本人主导完成了机器人快递背筐系统的代码编写与PCB电路板设计，确保任务高效执行。</p><ul><li><strong>业绩与成果</strong></li></ul><p>​    2024年中国机器人大赛的激烈竞争中脱颖而出，荣获全国亚军，斩获国家一等奖。</p><h2 id="个人证书"><a href="#个人证书" class="headerlink" title="个人证书"></a>个人证书</h2><ul><li>英语四级（国家级） </li><li>英语六级（国家级）</li><li>普通话二级甲等（国家级）</li></ul><h2 id="技能特长"><a href="#技能特长" class="headerlink" title="技能特长"></a>技能特长</h2><ul><li><strong>C语言&amp;&amp;Python 程序设计</strong></li></ul><p>​    掌握C语言与Python程序设计能力，转专业考试C语言排名前5%，修读《程序设<br>计基础Python》课程，期末卷面成绩87分</p><ul><li><strong>stm32&amp;&amp;stm51单片机及基础电子元件使用</strong></li></ul><p>​    熟悉stm32标准库使用，掌握舵机、红外循迹模块、超声波测距、电机编码器等电子元件代码逻辑与使用。自行学习SPI、RS232、RS485、IIC通信总线协议。熟悉pid算法调参，目前自行DIY了一台红外循迹平衡小车。</p><ul><li><strong>电路设计及制作</strong></li></ul><p>​    熟悉altium designer软件使用，曾为机器狗设计pcb电路板。该机器狗于今年十一月份获得国家一等奖。目前正在自学《电路》以强化电路设计本领。熟练掌握电子元件焊接技巧。</p><ul><li><strong>Linux系统基础操作及指令</strong></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;为了以后应对各种场合写简历时能有更清晰的思路，单开此帖。也顺便记录自己的简历丰富进程，实时更新。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;教育背景&quot;&gt;&lt;a href=&quot;#教育背景&quot; class=&quot;headerlink&quot; title=&quot;教</summary>
      
    
    
    
    <category term="日记" scheme="https://zhr0529.cn/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>信息学院竞赛创新班学习进程</title>
    <link href="https://zhr0529.cn/posts/67ec6277.html"/>
    <id>https://zhr0529.cn/posts/67ec6277.html</id>
    <published>2024-12-09T14:19:47.000Z</published>
    <updated>2025-01-22T03:45:33.815Z</updated>
    
    <content type="html"><![CDATA[<h2 id="《电路》-第五版"><a href="#《电路》-第五版" class="headerlink" title="《电路》-第五版"></a>《电路》-第五版</h2><h3 id="学习进度：掌握基本的电路分析方式"><a href="#学习进度：掌握基本的电路分析方式" class="headerlink" title="学习进度：掌握基本的电路分析方式"></a>学习进度：掌握基本的电路分析方式</h3><p>第一章    电路模型和电路定律</p><p>第二章    电阻电路的等效变换</p><p>第三章    电阻电路的一般分析</p><p>第四章    电路定理</p><h2 id="51单片机软硬件学习"><a href="#51单片机软硬件学习" class="headerlink" title="51单片机软硬件学习"></a>51单片机软硬件学习</h2><ul><li>软件安装</li><li>编程实现点亮LED</li><li>编程实现LED闪烁&amp;LED流水灯&amp;数码管显示</li><li>I/O输入与输出控制按键</li><li>定时器中断</li><li>定时器的周期调用</li><li>数码管与定时器</li><li>PWM</li></ul><h2 id="焊接学习"><a href="#焊接学习" class="headerlink" title="焊接学习"></a>焊接学习</h2><p>已掌握贴片元件，插件元件，常见芯片封装焊接</p><h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><ul><li>完成51循迹小车制作，备战校赛</li></ul><h2 id="硬件电路-电子工程师养成"><a href="#硬件电路-电子工程师养成" class="headerlink" title="硬件电路/电子工程师养成"></a>硬件电路/电子工程师养成</h2><p>致谢b站免费教程，致谢推荐给我该教程的某位大佬</p><div class="tag link"><a class="link-card" title="硬件工程师入门教程|电子工程师|零基础|全免费|2024全新课程|中文字幕|B站 点赞 收藏NO.1_哔哩哔哩_bilibili" href="https://www.bilibili.com/video/BV1gHSyY3E6q?spm_id_from=333.788.videopod.episodes&vd_source=3d97a7809f5a62237ccc7e9ebe372fa8"><div class="left"><img src="/img/siteicon/64.png"/></div><div class="right"><p class="text">硬件工程师入门教程|电子工程师|零基础|全免费|2024全新课程|中文字幕|B站 点赞 收藏NO.1_哔哩哔哩_bilibili</p><p class="url">https://www.bilibili.com/video/BV1gHSyY3E6q?spm_id_from=333.788.videopod.episodes&vd_source=3d97a7809f5a62237ccc7e9ebe372fa8</p></div></a></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;《电路》-第五版&quot;&gt;&lt;a href=&quot;#《电路》-第五版&quot; class=&quot;headerlink&quot; title=&quot;《电路》-第五版&quot;&gt;&lt;/a&gt;《电路》-第五版&lt;/h2&gt;&lt;h3 id=&quot;学习进度：掌握基本的电路分析方式&quot;&gt;&lt;a href=&quot;#学习进度：掌握基本的电路分</summary>
      
    
    
    
    <category term="理论" scheme="https://zhr0529.cn/categories/%E7%90%86%E8%AE%BA/"/>
    
    
    <category term="竞赛创新" scheme="https://zhr0529.cn/tags/%E7%AB%9E%E8%B5%9B%E5%88%9B%E6%96%B0/"/>
    
  </entry>
  
  <entry>
    <title>【理论】《armcortex-M3权威指南》学习笔记</title>
    <link href="https://zhr0529.cn/posts/12f608ec.html"/>
    <id>https://zhr0529.cn/posts/12f608ec.html</id>
    <published>2024-11-29T14:59:42.000Z</published>
    <updated>2024-11-29T15:04:47.394Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《ARM-cortex-M3权威指南》学习笔记"><a href="#《ARM-cortex-M3权威指南》学习笔记" class="headerlink" title="《ARM cortex-M3权威指南》学习笔记"></a>《ARM cortex-M3权威指南》学习笔记</h1><h2 id="学习目的"><a href="#学习目的" class="headerlink" title="学习目的"></a>学习目的</h2><p>是时候把单片机开发学得再深入一些了。我希望自己之后的开发能深入到内核和汇编层面，自然要多补充一些理论基础。好的</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;《ARM-cortex-M3权威指南》学习笔记&quot;&gt;&lt;a href=&quot;#《ARM-cortex-M3权威指南》学习笔记&quot; class=&quot;headerlink&quot; title=&quot;《ARM cortex-M3权威指南》学习笔记&quot;&gt;&lt;/a&gt;《ARM cortex-M3权威指</summary>
      
    
    
    
    <category term="理论" scheme="https://zhr0529.cn/categories/%E7%90%86%E8%AE%BA/"/>
    
    
    <category term="cortex-M3" scheme="https://zhr0529.cn/tags/cortex-M3/"/>
    
  </entry>
  
  <entry>
    <title>【前端】个人博客开发日记 - 基于hexo+butterfly</title>
    <link href="https://zhr0529.cn/posts/a00776bd.html"/>
    <id>https://zhr0529.cn/posts/a00776bd.html</id>
    <published>2024-11-19T15:41:57.000Z</published>
    <updated>2024-11-24T14:55:52.578Z</updated>
    
    <content type="html"><![CDATA[<h1 id="个人博客开发日记"><a href="#个人博客开发日记" class="headerlink" title="个人博客开发日记"></a>个人博客开发日记</h1><h2 id="一、致谢"><a href="#一、致谢" class="headerlink" title="一、致谢"></a>一、致谢</h2><p>感谢安知鱼大佬，让我熟悉前端开发流程并使用框架快速搭建了博客，让我也体验了网页设计程序员的快乐~</p><div class="tag link"><a class="link-card" title="安知鱼：Butterfly重装日记" href="https://blog.anheyu.com/posts/sdxhu.html"><div class="left"><img src="https://s2.loli.net/2024/11/20/JjCpgOoieMHQ4lF.png）"/></div><div class="right"><p class="text">安知鱼：Butterfly重装日记</p><p class="url">https://blog.anheyu.com/posts/sdxhu.html</p></div></a></div><div class="tag link"><a class="link-card" title="糖果屋教程贴" href="https://akilar.top/posts/615e2dec/"><div class="left"><img src="https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico"/></div><div class="right"><p class="text">糖果屋教程贴</p><p class="url">https://akilar.top/posts/615e2dec/</p></div></a></div><h2 id="二、博客开发和前端学习暂时告一段落"><a href="#二、博客开发和前端学习暂时告一段落" class="headerlink" title="二、博客开发和前端学习暂时告一段落"></a>二、博客开发和前端学习暂时告一段落</h2><p>博客还有很多很多可以优化的地方，但我毕竟不是这个方向的，能琢磨成这样已经非常满意了。后面我会多写博客，等以后有机会再优化网站。</p><blockquote><p>网站主题配置文件</p></blockquote><p><img src="https://s2.loli.net/2024/11/20/BEZIamsbDlrhokd.png" alt=""></p><blockquote><p>文章编写源代码文件</p></blockquote><p><img src="https://s2.loli.net/2024/11/20/tK74R9SJOBUNIeu.png" alt=""></p><h2 id="关于网址域名更改回https-Fad1ngWind-github-io"><a href="#关于网址域名更改回https-Fad1ngWind-github-io" class="headerlink" title="关于网址域名更改回https://Fad1ngWind.github.io"></a>关于网址域名更改回<a href="https://Fad1ngWind.github.io">https://Fad1ngWind.github.io</a></h2><p>11.21号晚上，本来兴致勃勃的回到家里打开电脑想更新一下博客，结果发现网页访问不了了。各种问题排查才发现是没备案导致的，好家伙一研究才发现备案这么麻烦😢费时费力填了一大堆相关信息不说过不过还要看工作人员脸色，最后还要花几百块买个ICP备案服务码才肯给你搞。于是乎我决定先换回这个基于Github直接推送的域名，暂时先弃用之前斥巨资购买的两年zhr0529.cn的域名，望周知。😊</p><p><img src="https://s2.loli.net/2024/11/21/2ljPtJXagMZ1Amb.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;个人博客开发日记&quot;&gt;&lt;a href=&quot;#个人博客开发日记&quot; class=&quot;headerlink&quot; title=&quot;个人博客开发日记&quot;&gt;&lt;/a&gt;个人博客开发日记&lt;/h1&gt;&lt;h2 id=&quot;一、致谢&quot;&gt;&lt;a href=&quot;#一、致谢&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="实操" scheme="https://zhr0529.cn/categories/%E5%AE%9E%E6%93%8D/"/>
    
    
    <category term="Hexo" scheme="https://zhr0529.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>随想</title>
    <link href="https://zhr0529.cn/posts/b433b0a3.html"/>
    <id>https://zhr0529.cn/posts/b433b0a3.html</id>
    <published>2024-11-19T15:40:23.000Z</published>
    <updated>2024-11-29T15:01:51.753Z</updated>
    
    <content type="html"><![CDATA[<h2 id="迎着阳光盛大逃亡"><a href="#迎着阳光盛大逃亡" class="headerlink" title="迎着阳光盛大逃亡"></a>迎着阳光盛大逃亡</h2><p>​      最后留在记忆深处的总是那些虚无缥缈的东西，就像你记住一个人往往不是因为她的美。很多年后你连她的样子都忘记了。可偶然在人流如织的街头闻到她惯用的香水味，你在惊悚中下意识地回过头去，却只看见万千过客的背影，你这才想起即便刚才和你擦肩而过的确实是她，即便你跟她四目相对，你也未必能认出她今天的样子了。</p><p>往事总在回忆中被赋予寓意🫠</p><p><img src="https://s2.loli.net/2024/11/22/nWZo1f3zlrBY5EM.png" alt="龙族"></p>]]></content>
    
    
    <summary type="html">1</summary>
    
    
    
    <category term="日记" scheme="https://zhr0529.cn/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="随想" scheme="https://zhr0529.cn/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>【日记】</title>
    <link href="https://zhr0529.cn/posts/dfb8a81f.html"/>
    <id>https://zhr0529.cn/posts/dfb8a81f.html</id>
    <published>2024-11-19T06:50:31.000Z</published>
    <updated>2024-11-24T15:14:25.325Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Our-Story-Begins"><a href="#Our-Story-Begins" class="headerlink" title="Our Story Begins."></a>Our Story Begins.</h1><h2 id="一、我的个人网站的诞生"><a href="#一、我的个人网站的诞生" class="headerlink" title="一、我的个人网站的诞生"></a>一、我的个人网站的诞生</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="type">void</span> main&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello world!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">delay_ms(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一切的开始都是在刚上大学的那个迷茫的秋天。</p><div class="timeline orange"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>一路走来</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024.11 [降转后 大一上]</p></div></div><div class='timeline-item-content'><p>遇到了慧眼识珠的伯乐，随队参加了机器人大赛，收获了人生中第一个国一。参加了信息学院组织的竞赛班，开始自学电路，同时开始接触51单片机开发。我搭建了自己的个人博客网站。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024.8 [大一暑假]</p></div></div><div class='timeline-item-content'><p>自学一年c语言，以不低的排名转专业到机器人工程感知与控制，暑假开始自学Linux系统基础操作指令。同时开始接触Stm32，能为单片机与各类电子器件做基础的嵌入式开发。暑假在计算机公司实习，职位是云网运维工程师，上班就是在机房修电脑，蹲在服务器前等着bios系统启动，以及坐在大屏幕前看镜像监控。实习期间上班摸鱼学了画PCB电路板，这一关键的技能点在后来为我带来了许多机会。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024.5 [大一下]</p></div></div><div class='timeline-item-content'><p>室友们一起给我过了生日。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024.3 [大一下]</p></div></div><div class='timeline-item-content'><p>寒假在新东方兼职当助教，初次体验上班的无奈。经济学学科真的很抽象，我并不喜欢这种在纸上计算建模、对着图像曲线理论分析虚无缥缈的学科，再加上一直对金融股市有着不好的印象，我决定转专业。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023.11 [大一上]</p></div></div><div class='timeline-item-content'><p>面对未来无数未知的分岔路虽然时常会怀念高中的小镇做题家生活，但是大学也蛮精彩。遇到了很多很好的朋友们，期中考高数考了93分选择分流到计算机＋金融的高新专业量化金融。或许未来我会坐在屏幕，成为赛博华尔街之狼？</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023.8 [高考完的暑假]</p></div></div><div class='timeline-item-content'><p>暑假两个月考完了驾照，自学了一点Python，通关了许多曾经想玩的游戏，去了杭州、上海、天津、广州、澳门、香港。录取结果出了，浙江工业大学吗…嗯，虽然最后没有去一个211或者双一流，但是在杭州，好像还不错。</p></div></div></div><script async src="https://npm.elemecdn.com/tzy-blog/lib/js/other/sakura.js"></script>]]></content>
    
    
    <summary type="html">本站的第一篇帖子</summary>
    
    
    
    <category term="日记" scheme="https://zhr0529.cn/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="生活" scheme="https://zhr0529.cn/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
